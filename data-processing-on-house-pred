{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "auburn-professor",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:18.773388Z",
     "iopub.status.busy": "2021-04-21T07:52:18.771587Z",
     "iopub.status.idle": "2021-04-21T07:52:20.501246Z",
     "shell.execute_reply": "2021-04-21T07:52:20.500120Z"
    },
    "papermill": {
     "duration": 1.776458,
     "end_time": "2021-04-21T07:52:20.501448",
     "exception": false,
     "start_time": "2021-04-21T07:52:18.724990",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/house-prices-advanced-regression-techniques/sample_submission.csv\n",
      "/kaggle/input/house-prices-advanced-regression-techniques/data_description.txt\n",
      "/kaggle/input/house-prices-advanced-regression-techniques/train.csv\n",
      "/kaggle/input/house-prices-advanced-regression-techniques/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "pd.set_option('display.max_columns', None)\n",
    "pd.set_option('display.max_rows', 100)\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_squared_error\n",
    "import xgboost as xgb\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "seventh-contract",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:20.592036Z",
     "iopub.status.busy": "2021-04-21T07:52:20.591063Z",
     "iopub.status.idle": "2021-04-21T07:52:20.685115Z",
     "shell.execute_reply": "2021-04-21T07:52:20.684384Z"
    },
    "papermill": {
     "duration": 0.140313,
     "end_time": "2021-04-21T07:52:20.685257",
     "exception": false,
     "start_time": "2021-04-21T07:52:20.544944",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "trainDf = pd.read_csv('/kaggle/input/house-prices-advanced-regression-techniques/train.csv')\n",
    "testDf = pd.read_csv('/kaggle/input/house-prices-advanced-regression-techniques/test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "appropriate-worth",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:20.785563Z",
     "iopub.status.busy": "2021-04-21T07:52:20.775625Z",
     "iopub.status.idle": "2021-04-21T07:52:20.892426Z",
     "shell.execute_reply": "2021-04-21T07:52:20.893047Z"
    },
    "papermill": {
     "duration": 0.168339,
     "end_time": "2021-04-21T07:52:20.893238",
     "exception": false,
     "start_time": "2021-04-21T07:52:20.724899",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>Alley</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>LotConfig</th>\n",
       "      <th>LandSlope</th>\n",
       "      <th>Neighborhood</th>\n",
       "      <th>Condition1</th>\n",
       "      <th>Condition2</th>\n",
       "      <th>BldgType</th>\n",
       "      <th>HouseStyle</th>\n",
       "      <th>OverallQual</th>\n",
       "      <th>OverallCond</th>\n",
       "      <th>YearBuilt</th>\n",
       "      <th>YearRemodAdd</th>\n",
       "      <th>RoofStyle</th>\n",
       "      <th>RoofMatl</th>\n",
       "      <th>Exterior1st</th>\n",
       "      <th>Exterior2nd</th>\n",
       "      <th>MasVnrType</th>\n",
       "      <th>MasVnrArea</th>\n",
       "      <th>ExterQual</th>\n",
       "      <th>ExterCond</th>\n",
       "      <th>Foundation</th>\n",
       "      <th>BsmtQual</th>\n",
       "      <th>BsmtCond</th>\n",
       "      <th>BsmtExposure</th>\n",
       "      <th>BsmtFinType1</th>\n",
       "      <th>BsmtFinSF1</th>\n",
       "      <th>BsmtFinType2</th>\n",
       "      <th>BsmtFinSF2</th>\n",
       "      <th>BsmtUnfSF</th>\n",
       "      <th>TotalBsmtSF</th>\n",
       "      <th>Heating</th>\n",
       "      <th>HeatingQC</th>\n",
       "      <th>CentralAir</th>\n",
       "      <th>Electrical</th>\n",
       "      <th>1stFlrSF</th>\n",
       "      <th>2ndFlrSF</th>\n",
       "      <th>LowQualFinSF</th>\n",
       "      <th>GrLivArea</th>\n",
       "      <th>BsmtFullBath</th>\n",
       "      <th>BsmtHalfBath</th>\n",
       "      <th>FullBath</th>\n",
       "      <th>HalfBath</th>\n",
       "      <th>BedroomAbvGr</th>\n",
       "      <th>KitchenAbvGr</th>\n",
       "      <th>KitchenQual</th>\n",
       "      <th>TotRmsAbvGrd</th>\n",
       "      <th>Functional</th>\n",
       "      <th>Fireplaces</th>\n",
       "      <th>FireplaceQu</th>\n",
       "      <th>GarageType</th>\n",
       "      <th>GarageYrBlt</th>\n",
       "      <th>GarageFinish</th>\n",
       "      <th>GarageCars</th>\n",
       "      <th>GarageArea</th>\n",
       "      <th>GarageQual</th>\n",
       "      <th>GarageCond</th>\n",
       "      <th>PavedDrive</th>\n",
       "      <th>WoodDeckSF</th>\n",
       "      <th>OpenPorchSF</th>\n",
       "      <th>EnclosedPorch</th>\n",
       "      <th>3SsnPorch</th>\n",
       "      <th>ScreenPorch</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>PoolQC</th>\n",
       "      <th>Fence</th>\n",
       "      <th>MiscFeature</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>65.0</td>\n",
       "      <td>8450</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Inside</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>CollgCr</td>\n",
       "      <td>Norm</td>\n",
       "      <td>Norm</td>\n",
       "      <td>1Fam</td>\n",
       "      <td>2Story</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>2003</td>\n",
       "      <td>2003</td>\n",
       "      <td>Gable</td>\n",
       "      <td>CompShg</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>BrkFace</td>\n",
       "      <td>196.0</td>\n",
       "      <td>Gd</td>\n",
       "      <td>TA</td>\n",
       "      <td>PConc</td>\n",
       "      <td>Gd</td>\n",
       "      <td>TA</td>\n",
       "      <td>No</td>\n",
       "      <td>GLQ</td>\n",
       "      <td>706</td>\n",
       "      <td>Unf</td>\n",
       "      <td>0</td>\n",
       "      <td>150</td>\n",
       "      <td>856</td>\n",
       "      <td>GasA</td>\n",
       "      <td>Ex</td>\n",
       "      <td>Y</td>\n",
       "      <td>SBrkr</td>\n",
       "      <td>856</td>\n",
       "      <td>854</td>\n",
       "      <td>0</td>\n",
       "      <td>1710</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>Gd</td>\n",
       "      <td>8</td>\n",
       "      <td>Typ</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Attchd</td>\n",
       "      <td>2003.0</td>\n",
       "      <td>RFn</td>\n",
       "      <td>2</td>\n",
       "      <td>548</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>61</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>208500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>80.0</td>\n",
       "      <td>9600</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>FR2</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>Veenker</td>\n",
       "      <td>Feedr</td>\n",
       "      <td>Norm</td>\n",
       "      <td>1Fam</td>\n",
       "      <td>1Story</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>1976</td>\n",
       "      <td>1976</td>\n",
       "      <td>Gable</td>\n",
       "      <td>CompShg</td>\n",
       "      <td>MetalSd</td>\n",
       "      <td>MetalSd</td>\n",
       "      <td>None</td>\n",
       "      <td>0.0</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>CBlock</td>\n",
       "      <td>Gd</td>\n",
       "      <td>TA</td>\n",
       "      <td>Gd</td>\n",
       "      <td>ALQ</td>\n",
       "      <td>978</td>\n",
       "      <td>Unf</td>\n",
       "      <td>0</td>\n",
       "      <td>284</td>\n",
       "      <td>1262</td>\n",
       "      <td>GasA</td>\n",
       "      <td>Ex</td>\n",
       "      <td>Y</td>\n",
       "      <td>SBrkr</td>\n",
       "      <td>1262</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1262</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>TA</td>\n",
       "      <td>6</td>\n",
       "      <td>Typ</td>\n",
       "      <td>1</td>\n",
       "      <td>TA</td>\n",
       "      <td>Attchd</td>\n",
       "      <td>1976.0</td>\n",
       "      <td>RFn</td>\n",
       "      <td>2</td>\n",
       "      <td>460</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>298</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2007</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>181500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>68.0</td>\n",
       "      <td>11250</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Inside</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>CollgCr</td>\n",
       "      <td>Norm</td>\n",
       "      <td>Norm</td>\n",
       "      <td>1Fam</td>\n",
       "      <td>2Story</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>2001</td>\n",
       "      <td>2002</td>\n",
       "      <td>Gable</td>\n",
       "      <td>CompShg</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>BrkFace</td>\n",
       "      <td>162.0</td>\n",
       "      <td>Gd</td>\n",
       "      <td>TA</td>\n",
       "      <td>PConc</td>\n",
       "      <td>Gd</td>\n",
       "      <td>TA</td>\n",
       "      <td>Mn</td>\n",
       "      <td>GLQ</td>\n",
       "      <td>486</td>\n",
       "      <td>Unf</td>\n",
       "      <td>0</td>\n",
       "      <td>434</td>\n",
       "      <td>920</td>\n",
       "      <td>GasA</td>\n",
       "      <td>Ex</td>\n",
       "      <td>Y</td>\n",
       "      <td>SBrkr</td>\n",
       "      <td>920</td>\n",
       "      <td>866</td>\n",
       "      <td>0</td>\n",
       "      <td>1786</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>Gd</td>\n",
       "      <td>6</td>\n",
       "      <td>Typ</td>\n",
       "      <td>1</td>\n",
       "      <td>TA</td>\n",
       "      <td>Attchd</td>\n",
       "      <td>2001.0</td>\n",
       "      <td>RFn</td>\n",
       "      <td>2</td>\n",
       "      <td>608</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>42</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>223500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>70</td>\n",
       "      <td>RL</td>\n",
       "      <td>60.0</td>\n",
       "      <td>9550</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Corner</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>Crawfor</td>\n",
       "      <td>Norm</td>\n",
       "      <td>Norm</td>\n",
       "      <td>1Fam</td>\n",
       "      <td>2Story</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>1915</td>\n",
       "      <td>1970</td>\n",
       "      <td>Gable</td>\n",
       "      <td>CompShg</td>\n",
       "      <td>Wd Sdng</td>\n",
       "      <td>Wd Shng</td>\n",
       "      <td>None</td>\n",
       "      <td>0.0</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>BrkTil</td>\n",
       "      <td>TA</td>\n",
       "      <td>Gd</td>\n",
       "      <td>No</td>\n",
       "      <td>ALQ</td>\n",
       "      <td>216</td>\n",
       "      <td>Unf</td>\n",
       "      <td>0</td>\n",
       "      <td>540</td>\n",
       "      <td>756</td>\n",
       "      <td>GasA</td>\n",
       "      <td>Gd</td>\n",
       "      <td>Y</td>\n",
       "      <td>SBrkr</td>\n",
       "      <td>961</td>\n",
       "      <td>756</td>\n",
       "      <td>0</td>\n",
       "      <td>1717</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>Gd</td>\n",
       "      <td>7</td>\n",
       "      <td>Typ</td>\n",
       "      <td>1</td>\n",
       "      <td>Gd</td>\n",
       "      <td>Detchd</td>\n",
       "      <td>1998.0</td>\n",
       "      <td>Unf</td>\n",
       "      <td>3</td>\n",
       "      <td>642</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>35</td>\n",
       "      <td>272</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Abnorml</td>\n",
       "      <td>140000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>84.0</td>\n",
       "      <td>14260</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>FR2</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>NoRidge</td>\n",
       "      <td>Norm</td>\n",
       "      <td>Norm</td>\n",
       "      <td>1Fam</td>\n",
       "      <td>2Story</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>2000</td>\n",
       "      <td>2000</td>\n",
       "      <td>Gable</td>\n",
       "      <td>CompShg</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>BrkFace</td>\n",
       "      <td>350.0</td>\n",
       "      <td>Gd</td>\n",
       "      <td>TA</td>\n",
       "      <td>PConc</td>\n",
       "      <td>Gd</td>\n",
       "      <td>TA</td>\n",
       "      <td>Av</td>\n",
       "      <td>GLQ</td>\n",
       "      <td>655</td>\n",
       "      <td>Unf</td>\n",
       "      <td>0</td>\n",
       "      <td>490</td>\n",
       "      <td>1145</td>\n",
       "      <td>GasA</td>\n",
       "      <td>Ex</td>\n",
       "      <td>Y</td>\n",
       "      <td>SBrkr</td>\n",
       "      <td>1145</td>\n",
       "      <td>1053</td>\n",
       "      <td>0</td>\n",
       "      <td>2198</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>Gd</td>\n",
       "      <td>9</td>\n",
       "      <td>Typ</td>\n",
       "      <td>1</td>\n",
       "      <td>TA</td>\n",
       "      <td>Attchd</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>RFn</td>\n",
       "      <td>3</td>\n",
       "      <td>836</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>192</td>\n",
       "      <td>84</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1455</th>\n",
       "      <td>1456</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>62.0</td>\n",
       "      <td>7917</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Inside</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>Gilbert</td>\n",
       "      <td>Norm</td>\n",
       "      <td>Norm</td>\n",
       "      <td>1Fam</td>\n",
       "      <td>2Story</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>1999</td>\n",
       "      <td>2000</td>\n",
       "      <td>Gable</td>\n",
       "      <td>CompShg</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>None</td>\n",
       "      <td>0.0</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>PConc</td>\n",
       "      <td>Gd</td>\n",
       "      <td>TA</td>\n",
       "      <td>No</td>\n",
       "      <td>Unf</td>\n",
       "      <td>0</td>\n",
       "      <td>Unf</td>\n",
       "      <td>0</td>\n",
       "      <td>953</td>\n",
       "      <td>953</td>\n",
       "      <td>GasA</td>\n",
       "      <td>Ex</td>\n",
       "      <td>Y</td>\n",
       "      <td>SBrkr</td>\n",
       "      <td>953</td>\n",
       "      <td>694</td>\n",
       "      <td>0</td>\n",
       "      <td>1647</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>TA</td>\n",
       "      <td>7</td>\n",
       "      <td>Typ</td>\n",
       "      <td>1</td>\n",
       "      <td>TA</td>\n",
       "      <td>Attchd</td>\n",
       "      <td>1999.0</td>\n",
       "      <td>RFn</td>\n",
       "      <td>2</td>\n",
       "      <td>460</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2007</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>175000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1456</th>\n",
       "      <td>1457</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>85.0</td>\n",
       "      <td>13175</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Inside</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>NWAmes</td>\n",
       "      <td>Norm</td>\n",
       "      <td>Norm</td>\n",
       "      <td>1Fam</td>\n",
       "      <td>1Story</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>1978</td>\n",
       "      <td>1988</td>\n",
       "      <td>Gable</td>\n",
       "      <td>CompShg</td>\n",
       "      <td>Plywood</td>\n",
       "      <td>Plywood</td>\n",
       "      <td>Stone</td>\n",
       "      <td>119.0</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>CBlock</td>\n",
       "      <td>Gd</td>\n",
       "      <td>TA</td>\n",
       "      <td>No</td>\n",
       "      <td>ALQ</td>\n",
       "      <td>790</td>\n",
       "      <td>Rec</td>\n",
       "      <td>163</td>\n",
       "      <td>589</td>\n",
       "      <td>1542</td>\n",
       "      <td>GasA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>SBrkr</td>\n",
       "      <td>2073</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2073</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>TA</td>\n",
       "      <td>7</td>\n",
       "      <td>Min1</td>\n",
       "      <td>2</td>\n",
       "      <td>TA</td>\n",
       "      <td>Attchd</td>\n",
       "      <td>1978.0</td>\n",
       "      <td>Unf</td>\n",
       "      <td>2</td>\n",
       "      <td>500</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>349</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>MnPrv</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>210000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1457</th>\n",
       "      <td>1458</td>\n",
       "      <td>70</td>\n",
       "      <td>RL</td>\n",
       "      <td>66.0</td>\n",
       "      <td>9042</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Inside</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>Crawfor</td>\n",
       "      <td>Norm</td>\n",
       "      <td>Norm</td>\n",
       "      <td>1Fam</td>\n",
       "      <td>2Story</td>\n",
       "      <td>7</td>\n",
       "      <td>9</td>\n",
       "      <td>1941</td>\n",
       "      <td>2006</td>\n",
       "      <td>Gable</td>\n",
       "      <td>CompShg</td>\n",
       "      <td>CemntBd</td>\n",
       "      <td>CmentBd</td>\n",
       "      <td>None</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Ex</td>\n",
       "      <td>Gd</td>\n",
       "      <td>Stone</td>\n",
       "      <td>TA</td>\n",
       "      <td>Gd</td>\n",
       "      <td>No</td>\n",
       "      <td>GLQ</td>\n",
       "      <td>275</td>\n",
       "      <td>Unf</td>\n",
       "      <td>0</td>\n",
       "      <td>877</td>\n",
       "      <td>1152</td>\n",
       "      <td>GasA</td>\n",
       "      <td>Ex</td>\n",
       "      <td>Y</td>\n",
       "      <td>SBrkr</td>\n",
       "      <td>1188</td>\n",
       "      <td>1152</td>\n",
       "      <td>0</td>\n",
       "      <td>2340</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>Gd</td>\n",
       "      <td>9</td>\n",
       "      <td>Typ</td>\n",
       "      <td>2</td>\n",
       "      <td>Gd</td>\n",
       "      <td>Attchd</td>\n",
       "      <td>1941.0</td>\n",
       "      <td>RFn</td>\n",
       "      <td>1</td>\n",
       "      <td>252</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>GdPrv</td>\n",
       "      <td>Shed</td>\n",
       "      <td>2500</td>\n",
       "      <td>5</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>266500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1458</th>\n",
       "      <td>1459</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>68.0</td>\n",
       "      <td>9717</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Inside</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>NAmes</td>\n",
       "      <td>Norm</td>\n",
       "      <td>Norm</td>\n",
       "      <td>1Fam</td>\n",
       "      <td>1Story</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>1950</td>\n",
       "      <td>1996</td>\n",
       "      <td>Hip</td>\n",
       "      <td>CompShg</td>\n",
       "      <td>MetalSd</td>\n",
       "      <td>MetalSd</td>\n",
       "      <td>None</td>\n",
       "      <td>0.0</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>CBlock</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Mn</td>\n",
       "      <td>GLQ</td>\n",
       "      <td>49</td>\n",
       "      <td>Rec</td>\n",
       "      <td>1029</td>\n",
       "      <td>0</td>\n",
       "      <td>1078</td>\n",
       "      <td>GasA</td>\n",
       "      <td>Gd</td>\n",
       "      <td>Y</td>\n",
       "      <td>FuseA</td>\n",
       "      <td>1078</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1078</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>Gd</td>\n",
       "      <td>5</td>\n",
       "      <td>Typ</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Attchd</td>\n",
       "      <td>1950.0</td>\n",
       "      <td>Unf</td>\n",
       "      <td>1</td>\n",
       "      <td>240</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>366</td>\n",
       "      <td>0</td>\n",
       "      <td>112</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>142125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1459</th>\n",
       "      <td>1460</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>75.0</td>\n",
       "      <td>9937</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Inside</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>Edwards</td>\n",
       "      <td>Norm</td>\n",
       "      <td>Norm</td>\n",
       "      <td>1Fam</td>\n",
       "      <td>1Story</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>1965</td>\n",
       "      <td>1965</td>\n",
       "      <td>Gable</td>\n",
       "      <td>CompShg</td>\n",
       "      <td>HdBoard</td>\n",
       "      <td>HdBoard</td>\n",
       "      <td>None</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Gd</td>\n",
       "      <td>TA</td>\n",
       "      <td>CBlock</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>No</td>\n",
       "      <td>BLQ</td>\n",
       "      <td>830</td>\n",
       "      <td>LwQ</td>\n",
       "      <td>290</td>\n",
       "      <td>136</td>\n",
       "      <td>1256</td>\n",
       "      <td>GasA</td>\n",
       "      <td>Gd</td>\n",
       "      <td>Y</td>\n",
       "      <td>SBrkr</td>\n",
       "      <td>1256</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1256</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>TA</td>\n",
       "      <td>6</td>\n",
       "      <td>Typ</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Attchd</td>\n",
       "      <td>1965.0</td>\n",
       "      <td>Fin</td>\n",
       "      <td>1</td>\n",
       "      <td>276</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>736</td>\n",
       "      <td>68</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>147500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1460 rows × 81 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n",
       "0        1          60       RL         65.0     8450   Pave   NaN      Reg   \n",
       "1        2          20       RL         80.0     9600   Pave   NaN      Reg   \n",
       "2        3          60       RL         68.0    11250   Pave   NaN      IR1   \n",
       "3        4          70       RL         60.0     9550   Pave   NaN      IR1   \n",
       "4        5          60       RL         84.0    14260   Pave   NaN      IR1   \n",
       "...    ...         ...      ...          ...      ...    ...   ...      ...   \n",
       "1455  1456          60       RL         62.0     7917   Pave   NaN      Reg   \n",
       "1456  1457          20       RL         85.0    13175   Pave   NaN      Reg   \n",
       "1457  1458          70       RL         66.0     9042   Pave   NaN      Reg   \n",
       "1458  1459          20       RL         68.0     9717   Pave   NaN      Reg   \n",
       "1459  1460          20       RL         75.0     9937   Pave   NaN      Reg   \n",
       "\n",
       "     LandContour Utilities LotConfig LandSlope Neighborhood Condition1  \\\n",
       "0            Lvl    AllPub    Inside       Gtl      CollgCr       Norm   \n",
       "1            Lvl    AllPub       FR2       Gtl      Veenker      Feedr   \n",
       "2            Lvl    AllPub    Inside       Gtl      CollgCr       Norm   \n",
       "3            Lvl    AllPub    Corner       Gtl      Crawfor       Norm   \n",
       "4            Lvl    AllPub       FR2       Gtl      NoRidge       Norm   \n",
       "...          ...       ...       ...       ...          ...        ...   \n",
       "1455         Lvl    AllPub    Inside       Gtl      Gilbert       Norm   \n",
       "1456         Lvl    AllPub    Inside       Gtl       NWAmes       Norm   \n",
       "1457         Lvl    AllPub    Inside       Gtl      Crawfor       Norm   \n",
       "1458         Lvl    AllPub    Inside       Gtl        NAmes       Norm   \n",
       "1459         Lvl    AllPub    Inside       Gtl      Edwards       Norm   \n",
       "\n",
       "     Condition2 BldgType HouseStyle  OverallQual  OverallCond  YearBuilt  \\\n",
       "0          Norm     1Fam     2Story            7            5       2003   \n",
       "1          Norm     1Fam     1Story            6            8       1976   \n",
       "2          Norm     1Fam     2Story            7            5       2001   \n",
       "3          Norm     1Fam     2Story            7            5       1915   \n",
       "4          Norm     1Fam     2Story            8            5       2000   \n",
       "...         ...      ...        ...          ...          ...        ...   \n",
       "1455       Norm     1Fam     2Story            6            5       1999   \n",
       "1456       Norm     1Fam     1Story            6            6       1978   \n",
       "1457       Norm     1Fam     2Story            7            9       1941   \n",
       "1458       Norm     1Fam     1Story            5            6       1950   \n",
       "1459       Norm     1Fam     1Story            5            6       1965   \n",
       "\n",
       "      YearRemodAdd RoofStyle RoofMatl Exterior1st Exterior2nd MasVnrType  \\\n",
       "0             2003     Gable  CompShg     VinylSd     VinylSd    BrkFace   \n",
       "1             1976     Gable  CompShg     MetalSd     MetalSd       None   \n",
       "2             2002     Gable  CompShg     VinylSd     VinylSd    BrkFace   \n",
       "3             1970     Gable  CompShg     Wd Sdng     Wd Shng       None   \n",
       "4             2000     Gable  CompShg     VinylSd     VinylSd    BrkFace   \n",
       "...            ...       ...      ...         ...         ...        ...   \n",
       "1455          2000     Gable  CompShg     VinylSd     VinylSd       None   \n",
       "1456          1988     Gable  CompShg     Plywood     Plywood      Stone   \n",
       "1457          2006     Gable  CompShg     CemntBd     CmentBd       None   \n",
       "1458          1996       Hip  CompShg     MetalSd     MetalSd       None   \n",
       "1459          1965     Gable  CompShg     HdBoard     HdBoard       None   \n",
       "\n",
       "      MasVnrArea ExterQual ExterCond Foundation BsmtQual BsmtCond  \\\n",
       "0          196.0        Gd        TA      PConc       Gd       TA   \n",
       "1            0.0        TA        TA     CBlock       Gd       TA   \n",
       "2          162.0        Gd        TA      PConc       Gd       TA   \n",
       "3            0.0        TA        TA     BrkTil       TA       Gd   \n",
       "4          350.0        Gd        TA      PConc       Gd       TA   \n",
       "...          ...       ...       ...        ...      ...      ...   \n",
       "1455         0.0        TA        TA      PConc       Gd       TA   \n",
       "1456       119.0        TA        TA     CBlock       Gd       TA   \n",
       "1457         0.0        Ex        Gd      Stone       TA       Gd   \n",
       "1458         0.0        TA        TA     CBlock       TA       TA   \n",
       "1459         0.0        Gd        TA     CBlock       TA       TA   \n",
       "\n",
       "     BsmtExposure BsmtFinType1  BsmtFinSF1 BsmtFinType2  BsmtFinSF2  \\\n",
       "0              No          GLQ         706          Unf           0   \n",
       "1              Gd          ALQ         978          Unf           0   \n",
       "2              Mn          GLQ         486          Unf           0   \n",
       "3              No          ALQ         216          Unf           0   \n",
       "4              Av          GLQ         655          Unf           0   \n",
       "...           ...          ...         ...          ...         ...   \n",
       "1455           No          Unf           0          Unf           0   \n",
       "1456           No          ALQ         790          Rec         163   \n",
       "1457           No          GLQ         275          Unf           0   \n",
       "1458           Mn          GLQ          49          Rec        1029   \n",
       "1459           No          BLQ         830          LwQ         290   \n",
       "\n",
       "      BsmtUnfSF  TotalBsmtSF Heating HeatingQC CentralAir Electrical  \\\n",
       "0           150          856    GasA        Ex          Y      SBrkr   \n",
       "1           284         1262    GasA        Ex          Y      SBrkr   \n",
       "2           434          920    GasA        Ex          Y      SBrkr   \n",
       "3           540          756    GasA        Gd          Y      SBrkr   \n",
       "4           490         1145    GasA        Ex          Y      SBrkr   \n",
       "...         ...          ...     ...       ...        ...        ...   \n",
       "1455        953          953    GasA        Ex          Y      SBrkr   \n",
       "1456        589         1542    GasA        TA          Y      SBrkr   \n",
       "1457        877         1152    GasA        Ex          Y      SBrkr   \n",
       "1458          0         1078    GasA        Gd          Y      FuseA   \n",
       "1459        136         1256    GasA        Gd          Y      SBrkr   \n",
       "\n",
       "      1stFlrSF  2ndFlrSF  LowQualFinSF  GrLivArea  BsmtFullBath  BsmtHalfBath  \\\n",
       "0          856       854             0       1710             1             0   \n",
       "1         1262         0             0       1262             0             1   \n",
       "2          920       866             0       1786             1             0   \n",
       "3          961       756             0       1717             1             0   \n",
       "4         1145      1053             0       2198             1             0   \n",
       "...        ...       ...           ...        ...           ...           ...   \n",
       "1455       953       694             0       1647             0             0   \n",
       "1456      2073         0             0       2073             1             0   \n",
       "1457      1188      1152             0       2340             0             0   \n",
       "1458      1078         0             0       1078             1             0   \n",
       "1459      1256         0             0       1256             1             0   \n",
       "\n",
       "      FullBath  HalfBath  BedroomAbvGr  KitchenAbvGr KitchenQual  \\\n",
       "0            2         1             3             1          Gd   \n",
       "1            2         0             3             1          TA   \n",
       "2            2         1             3             1          Gd   \n",
       "3            1         0             3             1          Gd   \n",
       "4            2         1             4             1          Gd   \n",
       "...        ...       ...           ...           ...         ...   \n",
       "1455         2         1             3             1          TA   \n",
       "1456         2         0             3             1          TA   \n",
       "1457         2         0             4             1          Gd   \n",
       "1458         1         0             2             1          Gd   \n",
       "1459         1         1             3             1          TA   \n",
       "\n",
       "      TotRmsAbvGrd Functional  Fireplaces FireplaceQu GarageType  GarageYrBlt  \\\n",
       "0                8        Typ           0         NaN     Attchd       2003.0   \n",
       "1                6        Typ           1          TA     Attchd       1976.0   \n",
       "2                6        Typ           1          TA     Attchd       2001.0   \n",
       "3                7        Typ           1          Gd     Detchd       1998.0   \n",
       "4                9        Typ           1          TA     Attchd       2000.0   \n",
       "...            ...        ...         ...         ...        ...          ...   \n",
       "1455             7        Typ           1          TA     Attchd       1999.0   \n",
       "1456             7       Min1           2          TA     Attchd       1978.0   \n",
       "1457             9        Typ           2          Gd     Attchd       1941.0   \n",
       "1458             5        Typ           0         NaN     Attchd       1950.0   \n",
       "1459             6        Typ           0         NaN     Attchd       1965.0   \n",
       "\n",
       "     GarageFinish  GarageCars  GarageArea GarageQual GarageCond PavedDrive  \\\n",
       "0             RFn           2         548         TA         TA          Y   \n",
       "1             RFn           2         460         TA         TA          Y   \n",
       "2             RFn           2         608         TA         TA          Y   \n",
       "3             Unf           3         642         TA         TA          Y   \n",
       "4             RFn           3         836         TA         TA          Y   \n",
       "...           ...         ...         ...        ...        ...        ...   \n",
       "1455          RFn           2         460         TA         TA          Y   \n",
       "1456          Unf           2         500         TA         TA          Y   \n",
       "1457          RFn           1         252         TA         TA          Y   \n",
       "1458          Unf           1         240         TA         TA          Y   \n",
       "1459          Fin           1         276         TA         TA          Y   \n",
       "\n",
       "      WoodDeckSF  OpenPorchSF  EnclosedPorch  3SsnPorch  ScreenPorch  \\\n",
       "0              0           61              0          0            0   \n",
       "1            298            0              0          0            0   \n",
       "2              0           42              0          0            0   \n",
       "3              0           35            272          0            0   \n",
       "4            192           84              0          0            0   \n",
       "...          ...          ...            ...        ...          ...   \n",
       "1455           0           40              0          0            0   \n",
       "1456         349            0              0          0            0   \n",
       "1457           0           60              0          0            0   \n",
       "1458         366            0            112          0            0   \n",
       "1459         736           68              0          0            0   \n",
       "\n",
       "      PoolArea PoolQC  Fence MiscFeature  MiscVal  MoSold  YrSold SaleType  \\\n",
       "0            0    NaN    NaN         NaN        0       2    2008       WD   \n",
       "1            0    NaN    NaN         NaN        0       5    2007       WD   \n",
       "2            0    NaN    NaN         NaN        0       9    2008       WD   \n",
       "3            0    NaN    NaN         NaN        0       2    2006       WD   \n",
       "4            0    NaN    NaN         NaN        0      12    2008       WD   \n",
       "...        ...    ...    ...         ...      ...     ...     ...      ...   \n",
       "1455         0    NaN    NaN         NaN        0       8    2007       WD   \n",
       "1456         0    NaN  MnPrv         NaN        0       2    2010       WD   \n",
       "1457         0    NaN  GdPrv        Shed     2500       5    2010       WD   \n",
       "1458         0    NaN    NaN         NaN        0       4    2010       WD   \n",
       "1459         0    NaN    NaN         NaN        0       6    2008       WD   \n",
       "\n",
       "     SaleCondition  SalePrice  \n",
       "0           Normal     208500  \n",
       "1           Normal     181500  \n",
       "2           Normal     223500  \n",
       "3          Abnorml     140000  \n",
       "4           Normal     250000  \n",
       "...            ...        ...  \n",
       "1455        Normal     175000  \n",
       "1456        Normal     210000  \n",
       "1457        Normal     266500  \n",
       "1458        Normal     142125  \n",
       "1459        Normal     147500  \n",
       "\n",
       "[1460 rows x 81 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trainDf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "piano-platinum",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:20.986769Z",
     "iopub.status.busy": "2021-04-21T07:52:20.985928Z",
     "iopub.status.idle": "2021-04-21T07:52:20.989770Z",
     "shell.execute_reply": "2021-04-21T07:52:20.989076Z"
    },
    "papermill": {
     "duration": 0.049863,
     "end_time": "2021-04-21T07:52:20.989956",
     "exception": false,
     "start_time": "2021-04-21T07:52:20.940093",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Lets work on mutual Infos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "explicit-prophet",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:21.090682Z",
     "iopub.status.busy": "2021-04-21T07:52:21.087210Z",
     "iopub.status.idle": "2021-04-21T07:52:21.094590Z",
     "shell.execute_reply": "2021-04-21T07:52:21.093912Z"
    },
    "papermill": {
     "duration": 0.06163,
     "end_time": "2021-04-21T07:52:21.094738",
     "exception": false,
     "start_time": "2021-04-21T07:52:21.033108",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "nullIndexes = trainDf.isnull().sum().to_frame('nulls').sort_values('nulls',ascending=False)[0:19].index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "commercial-delta",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:21.216595Z",
     "iopub.status.busy": "2021-04-21T07:52:21.215398Z",
     "iopub.status.idle": "2021-04-21T07:52:21.219223Z",
     "shell.execute_reply": "2021-04-21T07:52:21.219867Z"
    },
    "papermill": {
     "duration": 0.066967,
     "end_time": "2021-04-21T07:52:21.220069",
     "exception": false,
     "start_time": "2021-04-21T07:52:21.153102",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Boş veriler:\n",
    "#PoolQC - 1453\n",
    "#MiscFeature - 1406\n",
    "#Alley - 1369\n",
    "#Fence - 1179\n",
    "#FireplaceQu - 690\n",
    "#LotFrontage - 259\n",
    "#GarageYrBlt - 81\n",
    "#GarageCond - 81\n",
    "#GarageType - 81\n",
    "#GarageFinish - 81\n",
    "#GarageQual - 81\n",
    "#BsmtFinType2 - 38\n",
    "#BsmtExposure - 38\n",
    "#BsmtQual - 37\n",
    "#BsmtCond - 37\n",
    "#BsmtFinType1 - 37\n",
    "#MasVnrArea - 8\n",
    "#MasVnrType - 8\n",
    "#Electrical - 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "current-technique",
   "metadata": {
    "papermill": {
     "duration": 0.043216,
     "end_time": "2021-04-21T07:52:21.308190",
     "exception": false,
     "start_time": "2021-04-21T07:52:21.264974",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "tested-detroit",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:21.402205Z",
     "iopub.status.busy": "2021-04-21T07:52:21.401576Z",
     "iopub.status.idle": "2021-04-21T07:52:21.434739Z",
     "shell.execute_reply": "2021-04-21T07:52:21.435401Z"
    },
    "papermill": {
     "duration": 0.080225,
     "end_time": "2021-04-21T07:52:21.435603",
     "exception": false,
     "start_time": "2021-04-21T07:52:21.355378",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1460 entries, 0 to 1459\n",
      "Data columns (total 81 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   Id             1460 non-null   int64  \n",
      " 1   MSSubClass     1460 non-null   int64  \n",
      " 2   MSZoning       1460 non-null   object \n",
      " 3   LotFrontage    1201 non-null   float64\n",
      " 4   LotArea        1460 non-null   int64  \n",
      " 5   Street         1460 non-null   object \n",
      " 6   Alley          91 non-null     object \n",
      " 7   LotShape       1460 non-null   object \n",
      " 8   LandContour    1460 non-null   object \n",
      " 9   Utilities      1460 non-null   object \n",
      " 10  LotConfig      1460 non-null   object \n",
      " 11  LandSlope      1460 non-null   object \n",
      " 12  Neighborhood   1460 non-null   object \n",
      " 13  Condition1     1460 non-null   object \n",
      " 14  Condition2     1460 non-null   object \n",
      " 15  BldgType       1460 non-null   object \n",
      " 16  HouseStyle     1460 non-null   object \n",
      " 17  OverallQual    1460 non-null   int64  \n",
      " 18  OverallCond    1460 non-null   int64  \n",
      " 19  YearBuilt      1460 non-null   int64  \n",
      " 20  YearRemodAdd   1460 non-null   int64  \n",
      " 21  RoofStyle      1460 non-null   object \n",
      " 22  RoofMatl       1460 non-null   object \n",
      " 23  Exterior1st    1460 non-null   object \n",
      " 24  Exterior2nd    1460 non-null   object \n",
      " 25  MasVnrType     1452 non-null   object \n",
      " 26  MasVnrArea     1452 non-null   float64\n",
      " 27  ExterQual      1460 non-null   object \n",
      " 28  ExterCond      1460 non-null   object \n",
      " 29  Foundation     1460 non-null   object \n",
      " 30  BsmtQual       1423 non-null   object \n",
      " 31  BsmtCond       1423 non-null   object \n",
      " 32  BsmtExposure   1422 non-null   object \n",
      " 33  BsmtFinType1   1423 non-null   object \n",
      " 34  BsmtFinSF1     1460 non-null   int64  \n",
      " 35  BsmtFinType2   1422 non-null   object \n",
      " 36  BsmtFinSF2     1460 non-null   int64  \n",
      " 37  BsmtUnfSF      1460 non-null   int64  \n",
      " 38  TotalBsmtSF    1460 non-null   int64  \n",
      " 39  Heating        1460 non-null   object \n",
      " 40  HeatingQC      1460 non-null   object \n",
      " 41  CentralAir     1460 non-null   object \n",
      " 42  Electrical     1459 non-null   object \n",
      " 43  1stFlrSF       1460 non-null   int64  \n",
      " 44  2ndFlrSF       1460 non-null   int64  \n",
      " 45  LowQualFinSF   1460 non-null   int64  \n",
      " 46  GrLivArea      1460 non-null   int64  \n",
      " 47  BsmtFullBath   1460 non-null   int64  \n",
      " 48  BsmtHalfBath   1460 non-null   int64  \n",
      " 49  FullBath       1460 non-null   int64  \n",
      " 50  HalfBath       1460 non-null   int64  \n",
      " 51  BedroomAbvGr   1460 non-null   int64  \n",
      " 52  KitchenAbvGr   1460 non-null   int64  \n",
      " 53  KitchenQual    1460 non-null   object \n",
      " 54  TotRmsAbvGrd   1460 non-null   int64  \n",
      " 55  Functional     1460 non-null   object \n",
      " 56  Fireplaces     1460 non-null   int64  \n",
      " 57  FireplaceQu    770 non-null    object \n",
      " 58  GarageType     1379 non-null   object \n",
      " 59  GarageYrBlt    1379 non-null   float64\n",
      " 60  GarageFinish   1379 non-null   object \n",
      " 61  GarageCars     1460 non-null   int64  \n",
      " 62  GarageArea     1460 non-null   int64  \n",
      " 63  GarageQual     1379 non-null   object \n",
      " 64  GarageCond     1379 non-null   object \n",
      " 65  PavedDrive     1460 non-null   object \n",
      " 66  WoodDeckSF     1460 non-null   int64  \n",
      " 67  OpenPorchSF    1460 non-null   int64  \n",
      " 68  EnclosedPorch  1460 non-null   int64  \n",
      " 69  3SsnPorch      1460 non-null   int64  \n",
      " 70  ScreenPorch    1460 non-null   int64  \n",
      " 71  PoolArea       1460 non-null   int64  \n",
      " 72  PoolQC         7 non-null      object \n",
      " 73  Fence          281 non-null    object \n",
      " 74  MiscFeature    54 non-null     object \n",
      " 75  MiscVal        1460 non-null   int64  \n",
      " 76  MoSold         1460 non-null   int64  \n",
      " 77  YrSold         1460 non-null   int64  \n",
      " 78  SaleType       1460 non-null   object \n",
      " 79  SaleCondition  1460 non-null   object \n",
      " 80  SalePrice      1460 non-null   int64  \n",
      "dtypes: float64(3), int64(35), object(43)\n",
      "memory usage: 924.0+ KB\n"
     ]
    }
   ],
   "source": [
    "trainDf.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "proud-relative",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:21.529644Z",
     "iopub.status.busy": "2021-04-21T07:52:21.528942Z",
     "iopub.status.idle": "2021-04-21T07:52:21.535539Z",
     "shell.execute_reply": "2021-04-21T07:52:21.536078Z"
    },
    "papermill": {
     "duration": 0.054767,
     "end_time": "2021-04-21T07:52:21.536254",
     "exception": false,
     "start_time": "2021-04-21T07:52:21.481487",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "objectValues = trainDf.loc[:, trainDf.dtypes == np.object].columns\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "immune-blood",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:21.628213Z",
     "iopub.status.busy": "2021-04-21T07:52:21.627471Z",
     "iopub.status.idle": "2021-04-21T07:52:21.630591Z",
     "shell.execute_reply": "2021-04-21T07:52:21.631115Z"
    },
    "papermill": {
     "duration": 0.052049,
     "end_time": "2021-04-21T07:52:21.631307",
     "exception": false,
     "start_time": "2021-04-21T07:52:21.579258",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour', 'Utilities',\n",
       "       'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n",
       "       'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n",
       "       'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation',\n",
       "       'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n",
       "       'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual',\n",
       "       'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual',\n",
       "       'GarageCond', 'PavedDrive', 'PoolQC', 'Fence', 'MiscFeature',\n",
       "       'SaleType', 'SaleCondition'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "objectValues"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "resistant-award",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:21.723813Z",
     "iopub.status.busy": "2021-04-21T07:52:21.723080Z",
     "iopub.status.idle": "2021-04-21T07:52:21.770993Z",
     "shell.execute_reply": "2021-04-21T07:52:21.771574Z"
    },
    "papermill": {
     "duration": 0.095827,
     "end_time": "2021-04-21T07:52:21.771754",
     "exception": false,
     "start_time": "2021-04-21T07:52:21.675927",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "label_encoder = LabelEncoder()\n",
    "for col in objectValues:\n",
    "    trainDf[col] = label_encoder.fit_transform(trainDf[col])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "hybrid-divide",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:21.864355Z",
     "iopub.status.busy": "2021-04-21T07:52:21.863640Z",
     "iopub.status.idle": "2021-04-21T07:52:21.913514Z",
     "shell.execute_reply": "2021-04-21T07:52:21.914077Z"
    },
    "papermill": {
     "duration": 0.098377,
     "end_time": "2021-04-21T07:52:21.914251",
     "exception": false,
     "start_time": "2021-04-21T07:52:21.815874",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "label_encoder = LabelEncoder()\n",
    "for col in objectValues:\n",
    "    testDf[col] = label_encoder.fit_transform(testDf[col])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "distinguished-professor",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:22.005465Z",
     "iopub.status.busy": "2021-04-21T07:52:22.004822Z",
     "iopub.status.idle": "2021-04-21T07:52:22.034778Z",
     "shell.execute_reply": "2021-04-21T07:52:22.034070Z"
    },
    "papermill": {
     "duration": 0.076277,
     "end_time": "2021-04-21T07:52:22.034928",
     "exception": false,
     "start_time": "2021-04-21T07:52:21.958651",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1460 entries, 0 to 1459\n",
      "Data columns (total 81 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   Id             1460 non-null   int64  \n",
      " 1   MSSubClass     1460 non-null   int64  \n",
      " 2   MSZoning       1460 non-null   int64  \n",
      " 3   LotFrontage    1201 non-null   float64\n",
      " 4   LotArea        1460 non-null   int64  \n",
      " 5   Street         1460 non-null   int64  \n",
      " 6   Alley          1460 non-null   int64  \n",
      " 7   LotShape       1460 non-null   int64  \n",
      " 8   LandContour    1460 non-null   int64  \n",
      " 9   Utilities      1460 non-null   int64  \n",
      " 10  LotConfig      1460 non-null   int64  \n",
      " 11  LandSlope      1460 non-null   int64  \n",
      " 12  Neighborhood   1460 non-null   int64  \n",
      " 13  Condition1     1460 non-null   int64  \n",
      " 14  Condition2     1460 non-null   int64  \n",
      " 15  BldgType       1460 non-null   int64  \n",
      " 16  HouseStyle     1460 non-null   int64  \n",
      " 17  OverallQual    1460 non-null   int64  \n",
      " 18  OverallCond    1460 non-null   int64  \n",
      " 19  YearBuilt      1460 non-null   int64  \n",
      " 20  YearRemodAdd   1460 non-null   int64  \n",
      " 21  RoofStyle      1460 non-null   int64  \n",
      " 22  RoofMatl       1460 non-null   int64  \n",
      " 23  Exterior1st    1460 non-null   int64  \n",
      " 24  Exterior2nd    1460 non-null   int64  \n",
      " 25  MasVnrType     1460 non-null   int64  \n",
      " 26  MasVnrArea     1452 non-null   float64\n",
      " 27  ExterQual      1460 non-null   int64  \n",
      " 28  ExterCond      1460 non-null   int64  \n",
      " 29  Foundation     1460 non-null   int64  \n",
      " 30  BsmtQual       1460 non-null   int64  \n",
      " 31  BsmtCond       1460 non-null   int64  \n",
      " 32  BsmtExposure   1460 non-null   int64  \n",
      " 33  BsmtFinType1   1460 non-null   int64  \n",
      " 34  BsmtFinSF1     1460 non-null   int64  \n",
      " 35  BsmtFinType2   1460 non-null   int64  \n",
      " 36  BsmtFinSF2     1460 non-null   int64  \n",
      " 37  BsmtUnfSF      1460 non-null   int64  \n",
      " 38  TotalBsmtSF    1460 non-null   int64  \n",
      " 39  Heating        1460 non-null   int64  \n",
      " 40  HeatingQC      1460 non-null   int64  \n",
      " 41  CentralAir     1460 non-null   int64  \n",
      " 42  Electrical     1460 non-null   int64  \n",
      " 43  1stFlrSF       1460 non-null   int64  \n",
      " 44  2ndFlrSF       1460 non-null   int64  \n",
      " 45  LowQualFinSF   1460 non-null   int64  \n",
      " 46  GrLivArea      1460 non-null   int64  \n",
      " 47  BsmtFullBath   1460 non-null   int64  \n",
      " 48  BsmtHalfBath   1460 non-null   int64  \n",
      " 49  FullBath       1460 non-null   int64  \n",
      " 50  HalfBath       1460 non-null   int64  \n",
      " 51  BedroomAbvGr   1460 non-null   int64  \n",
      " 52  KitchenAbvGr   1460 non-null   int64  \n",
      " 53  KitchenQual    1460 non-null   int64  \n",
      " 54  TotRmsAbvGrd   1460 non-null   int64  \n",
      " 55  Functional     1460 non-null   int64  \n",
      " 56  Fireplaces     1460 non-null   int64  \n",
      " 57  FireplaceQu    1460 non-null   int64  \n",
      " 58  GarageType     1460 non-null   int64  \n",
      " 59  GarageYrBlt    1379 non-null   float64\n",
      " 60  GarageFinish   1460 non-null   int64  \n",
      " 61  GarageCars     1460 non-null   int64  \n",
      " 62  GarageArea     1460 non-null   int64  \n",
      " 63  GarageQual     1460 non-null   int64  \n",
      " 64  GarageCond     1460 non-null   int64  \n",
      " 65  PavedDrive     1460 non-null   int64  \n",
      " 66  WoodDeckSF     1460 non-null   int64  \n",
      " 67  OpenPorchSF    1460 non-null   int64  \n",
      " 68  EnclosedPorch  1460 non-null   int64  \n",
      " 69  3SsnPorch      1460 non-null   int64  \n",
      " 70  ScreenPorch    1460 non-null   int64  \n",
      " 71  PoolArea       1460 non-null   int64  \n",
      " 72  PoolQC         1460 non-null   int64  \n",
      " 73  Fence          1460 non-null   int64  \n",
      " 74  MiscFeature    1460 non-null   int64  \n",
      " 75  MiscVal        1460 non-null   int64  \n",
      " 76  MoSold         1460 non-null   int64  \n",
      " 77  YrSold         1460 non-null   int64  \n",
      " 78  SaleType       1460 non-null   int64  \n",
      " 79  SaleCondition  1460 non-null   int64  \n",
      " 80  SalePrice      1460 non-null   int64  \n",
      "dtypes: float64(3), int64(78)\n",
      "memory usage: 924.0 KB\n"
     ]
    }
   ],
   "source": [
    "trainDf.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "major-opera",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:22.140832Z",
     "iopub.status.busy": "2021-04-21T07:52:22.139278Z",
     "iopub.status.idle": "2021-04-21T07:52:22.153477Z",
     "shell.execute_reply": "2021-04-21T07:52:22.153982Z"
    },
    "papermill": {
     "duration": 0.070953,
     "end_time": "2021-04-21T07:52:22.154162",
     "exception": false,
     "start_time": "2021-04-21T07:52:22.083209",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "for col in nullIndexes:\n",
    "    trainDf[col] =  trainDf[col].interpolate(method='linear', limit_direction='forward', axis=0)\n",
    "\n",
    "    \n",
    "for col in nullIndexes:\n",
    "    testDf[col] =  testDf[col].interpolate(method='linear', limit_direction='forward', axis=0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "elementary-puzzle",
   "metadata": {
    "papermill": {
     "duration": 0.044035,
     "end_time": "2021-04-21T07:52:22.243165",
     "exception": false,
     "start_time": "2021-04-21T07:52:22.199130",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "concrete-european",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:22.335564Z",
     "iopub.status.busy": "2021-04-21T07:52:22.334677Z",
     "iopub.status.idle": "2021-04-21T07:52:22.426242Z",
     "shell.execute_reply": "2021-04-21T07:52:22.425664Z"
    },
    "papermill": {
     "duration": 0.139061,
     "end_time": "2021-04-21T07:52:22.426453",
     "exception": false,
     "start_time": "2021-04-21T07:52:22.287392",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'X' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-14-b5fec669aca1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mX\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'X' is not defined"
     ]
    }
   ],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "pediatric-westminster",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:22.522562Z",
     "iopub.status.busy": "2021-04-21T07:52:22.521776Z",
     "iopub.status.idle": "2021-04-21T07:52:22.525661Z",
     "shell.execute_reply": "2021-04-21T07:52:22.525047Z"
    },
    "papermill": {
     "duration": 0.053975,
     "end_time": "2021-04-21T07:52:22.525819",
     "exception": false,
     "start_time": "2021-04-21T07:52:22.471844",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "trainData = trainDf.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "sophisticated-ukraine",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:22.619985Z",
     "iopub.status.busy": "2021-04-21T07:52:22.619283Z",
     "iopub.status.idle": "2021-04-21T07:52:22.622822Z",
     "shell.execute_reply": "2021-04-21T07:52:22.623296Z"
    },
    "papermill": {
     "duration": 0.053071,
     "end_time": "2021-04-21T07:52:22.623476",
     "exception": false,
     "start_time": "2021-04-21T07:52:22.570405",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#mi score için int değerli değişkenler gerekmekte"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "waiting-diversity",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:22.717413Z",
     "iopub.status.busy": "2021-04-21T07:52:22.716772Z",
     "iopub.status.idle": "2021-04-21T07:52:22.721377Z",
     "shell.execute_reply": "2021-04-21T07:52:22.721905Z"
    },
    "papermill": {
     "duration": 0.052763,
     "end_time": "2021-04-21T07:52:22.722079",
     "exception": false,
     "start_time": "2021-04-21T07:52:22.669316",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# All discrete features should now have integer dtypes (double-check this before using MI!)\n",
    "discrete_features = trainData.dtypes == int"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "polish-fifteen",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:22.816007Z",
     "iopub.status.busy": "2021-04-21T07:52:22.815341Z",
     "iopub.status.idle": "2021-04-21T07:52:22.821228Z",
     "shell.execute_reply": "2021-04-21T07:52:22.820633Z"
    },
    "papermill": {
     "duration": 0.054254,
     "end_time": "2021-04-21T07:52:22.821370",
     "exception": false,
     "start_time": "2021-04-21T07:52:22.767116",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "discrete_features_2 = testDf.dtypes == int"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "fewer-clarity",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:22.916184Z",
     "iopub.status.busy": "2021-04-21T07:52:22.915432Z",
     "iopub.status.idle": "2021-04-21T07:52:22.924656Z",
     "shell.execute_reply": "2021-04-21T07:52:22.924053Z"
    },
    "papermill": {
     "duration": 0.058096,
     "end_time": "2021-04-21T07:52:22.924799",
     "exception": false,
     "start_time": "2021-04-21T07:52:22.866703",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Id                True\n",
       "MSSubClass        True\n",
       "MSZoning          True\n",
       "LotFrontage      False\n",
       "LotArea           True\n",
       "Street            True\n",
       "Alley             True\n",
       "LotShape          True\n",
       "LandContour       True\n",
       "Utilities         True\n",
       "LotConfig         True\n",
       "LandSlope         True\n",
       "Neighborhood      True\n",
       "Condition1        True\n",
       "Condition2        True\n",
       "BldgType          True\n",
       "HouseStyle        True\n",
       "OverallQual       True\n",
       "OverallCond       True\n",
       "YearBuilt         True\n",
       "YearRemodAdd      True\n",
       "RoofStyle         True\n",
       "RoofMatl          True\n",
       "Exterior1st       True\n",
       "Exterior2nd       True\n",
       "MasVnrType        True\n",
       "MasVnrArea       False\n",
       "ExterQual         True\n",
       "ExterCond         True\n",
       "Foundation        True\n",
       "BsmtQual          True\n",
       "BsmtCond          True\n",
       "BsmtExposure      True\n",
       "BsmtFinType1      True\n",
       "BsmtFinSF1        True\n",
       "BsmtFinType2      True\n",
       "BsmtFinSF2        True\n",
       "BsmtUnfSF         True\n",
       "TotalBsmtSF       True\n",
       "Heating           True\n",
       "HeatingQC         True\n",
       "CentralAir        True\n",
       "Electrical        True\n",
       "1stFlrSF          True\n",
       "2ndFlrSF          True\n",
       "LowQualFinSF      True\n",
       "GrLivArea         True\n",
       "BsmtFullBath      True\n",
       "BsmtHalfBath      True\n",
       "FullBath          True\n",
       "HalfBath          True\n",
       "BedroomAbvGr      True\n",
       "KitchenAbvGr      True\n",
       "KitchenQual       True\n",
       "TotRmsAbvGrd      True\n",
       "Functional        True\n",
       "Fireplaces        True\n",
       "FireplaceQu       True\n",
       "GarageType        True\n",
       "GarageYrBlt      False\n",
       "GarageFinish      True\n",
       "GarageCars        True\n",
       "GarageArea        True\n",
       "GarageQual        True\n",
       "GarageCond        True\n",
       "PavedDrive        True\n",
       "WoodDeckSF        True\n",
       "OpenPorchSF       True\n",
       "EnclosedPorch     True\n",
       "3SsnPorch         True\n",
       "ScreenPorch       True\n",
       "PoolArea          True\n",
       "PoolQC            True\n",
       "Fence             True\n",
       "MiscFeature       True\n",
       "MiscVal           True\n",
       "MoSold            True\n",
       "YrSold            True\n",
       "SaleType          True\n",
       "SaleCondition     True\n",
       "SalePrice         True\n",
       "dtype: bool"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "discrete_features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "standing-electron",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:23.023443Z",
     "iopub.status.busy": "2021-04-21T07:52:23.022272Z",
     "iopub.status.idle": "2021-04-21T07:52:23.028320Z",
     "shell.execute_reply": "2021-04-21T07:52:23.027673Z"
    },
    "papermill": {
     "duration": 0.058066,
     "end_time": "2021-04-21T07:52:23.028461",
     "exception": false,
     "start_time": "2021-04-21T07:52:22.970395",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "ts = trainData.columns.drop(['GarageYrBlt','Id','YearRemodAdd','YearBuilt','YrSold','GarageFinish'])\n",
    "ts\n",
    "X2 = trainData[ts]\n",
    "#,'MasVnrArea','LotFrontage'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "streaming-dancing",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:23.131665Z",
     "iopub.status.busy": "2021-04-21T07:52:23.130625Z",
     "iopub.status.idle": "2021-04-21T07:52:23.135286Z",
     "shell.execute_reply": "2021-04-21T07:52:23.134732Z"
    },
    "papermill": {
     "duration": 0.06013,
     "end_time": "2021-04-21T07:52:23.135428",
     "exception": false,
     "start_time": "2021-04-21T07:52:23.075298",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street', 'Alley',\n",
       "       'LotShape', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope',\n",
       "       'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle',\n",
       "       'OverallQual', 'OverallCond', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n",
       "       'Exterior2nd', 'MasVnrType', 'MasVnrArea', 'ExterQual', 'ExterCond',\n",
       "       'Foundation', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1',\n",
       "       'BsmtFinSF1', 'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF',\n",
       "       'Heating', 'HeatingQC', 'CentralAir', 'Electrical', '1stFlrSF',\n",
       "       '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath',\n",
       "       'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n",
       "       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType',\n",
       "       'GarageCars', 'GarageArea', 'GarageQual', 'GarageCond', 'PavedDrive',\n",
       "       'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch',\n",
       "       'ScreenPorch', 'PoolArea', 'PoolQC', 'Fence', 'MiscFeature', 'MiscVal',\n",
       "       'MoSold', 'SaleType', 'SaleCondition'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ts2 = testDf.columns.drop(['GarageYrBlt','Id','YearRemodAdd','YearBuilt','YrSold','GarageFinish'])\n",
    "ts2\n",
    "#,'MasVnrArea','LotFrontage'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "horizontal-deposit",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:23.236903Z",
     "iopub.status.busy": "2021-04-21T07:52:23.236046Z",
     "iopub.status.idle": "2021-04-21T07:52:23.240811Z",
     "shell.execute_reply": "2021-04-21T07:52:23.241328Z"
    },
    "papermill": {
     "duration": 0.058383,
     "end_time": "2021-04-21T07:52:23.241525",
     "exception": false,
     "start_time": "2021-04-21T07:52:23.183142",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Id', 'MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street',\n",
       "       'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',\n",
       "       'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',\n",
       "       'HouseStyle', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd',\n",
       "       'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',\n",
       "       'MasVnrArea', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',\n",
       "       'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1',\n",
       "       'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating',\n",
       "       'HeatingQC', 'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF',\n",
       "       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n",
       "       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n",
       "       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType',\n",
       "       'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual',\n",
       "       'GarageCond', 'PavedDrive', 'WoodDeckSF', 'OpenPorchSF',\n",
       "       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC',\n",
       "       'Fence', 'MiscFeature', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',\n",
       "       'SaleCondition', 'SalePrice'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trainData.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "laden-folks",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:23.343014Z",
     "iopub.status.busy": "2021-04-21T07:52:23.342146Z",
     "iopub.status.idle": "2021-04-21T07:52:23.346676Z",
     "shell.execute_reply": "2021-04-21T07:52:23.346027Z"
    },
    "papermill": {
     "duration": 0.057233,
     "end_time": "2021-04-21T07:52:23.346815",
     "exception": false,
     "start_time": "2021-04-21T07:52:23.289582",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street', 'Alley',\n",
       "       'LotShape', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope',\n",
       "       'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle',\n",
       "       'OverallQual', 'OverallCond', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n",
       "       'Exterior2nd', 'MasVnrType', 'MasVnrArea', 'ExterQual', 'ExterCond',\n",
       "       'Foundation', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1',\n",
       "       'BsmtFinSF1', 'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF',\n",
       "       'Heating', 'HeatingQC', 'CentralAir', 'Electrical', '1stFlrSF',\n",
       "       '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath',\n",
       "       'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n",
       "       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType',\n",
       "       'GarageCars', 'GarageArea', 'GarageQual', 'GarageCond', 'PavedDrive',\n",
       "       'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch',\n",
       "       'ScreenPorch', 'PoolArea', 'PoolQC', 'Fence', 'MiscFeature', 'MiscVal',\n",
       "       'MoSold', 'SaleType', 'SaleCondition', 'SalePrice'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "oriented-speed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:23.452586Z",
     "iopub.status.busy": "2021-04-21T07:52:23.451473Z",
     "iopub.status.idle": "2021-04-21T07:52:23.472366Z",
     "shell.execute_reply": "2021-04-21T07:52:23.471735Z"
    },
    "papermill": {
     "duration": 0.076566,
     "end_time": "2021-04-21T07:52:23.472546",
     "exception": false,
     "start_time": "2021-04-21T07:52:23.395980",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1460 entries, 0 to 1459\n",
      "Data columns (total 75 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   MSSubClass     1460 non-null   int64  \n",
      " 1   MSZoning       1460 non-null   int64  \n",
      " 2   LotFrontage    1460 non-null   float64\n",
      " 3   LotArea        1460 non-null   int64  \n",
      " 4   Street         1460 non-null   int64  \n",
      " 5   Alley          1460 non-null   int64  \n",
      " 6   LotShape       1460 non-null   int64  \n",
      " 7   LandContour    1460 non-null   int64  \n",
      " 8   Utilities      1460 non-null   int64  \n",
      " 9   LotConfig      1460 non-null   int64  \n",
      " 10  LandSlope      1460 non-null   int64  \n",
      " 11  Neighborhood   1460 non-null   int64  \n",
      " 12  Condition1     1460 non-null   int64  \n",
      " 13  Condition2     1460 non-null   int64  \n",
      " 14  BldgType       1460 non-null   int64  \n",
      " 15  HouseStyle     1460 non-null   int64  \n",
      " 16  OverallQual    1460 non-null   int64  \n",
      " 17  OverallCond    1460 non-null   int64  \n",
      " 18  RoofStyle      1460 non-null   int64  \n",
      " 19  RoofMatl       1460 non-null   int64  \n",
      " 20  Exterior1st    1460 non-null   int64  \n",
      " 21  Exterior2nd    1460 non-null   int64  \n",
      " 22  MasVnrType     1460 non-null   int64  \n",
      " 23  MasVnrArea     1460 non-null   float64\n",
      " 24  ExterQual      1460 non-null   int64  \n",
      " 25  ExterCond      1460 non-null   int64  \n",
      " 26  Foundation     1460 non-null   int64  \n",
      " 27  BsmtQual       1460 non-null   int64  \n",
      " 28  BsmtCond       1460 non-null   int64  \n",
      " 29  BsmtExposure   1460 non-null   int64  \n",
      " 30  BsmtFinType1   1460 non-null   int64  \n",
      " 31  BsmtFinSF1     1460 non-null   int64  \n",
      " 32  BsmtFinType2   1460 non-null   int64  \n",
      " 33  BsmtFinSF2     1460 non-null   int64  \n",
      " 34  BsmtUnfSF      1460 non-null   int64  \n",
      " 35  TotalBsmtSF    1460 non-null   int64  \n",
      " 36  Heating        1460 non-null   int64  \n",
      " 37  HeatingQC      1460 non-null   int64  \n",
      " 38  CentralAir     1460 non-null   int64  \n",
      " 39  Electrical     1460 non-null   int64  \n",
      " 40  1stFlrSF       1460 non-null   int64  \n",
      " 41  2ndFlrSF       1460 non-null   int64  \n",
      " 42  LowQualFinSF   1460 non-null   int64  \n",
      " 43  GrLivArea      1460 non-null   int64  \n",
      " 44  BsmtFullBath   1460 non-null   int64  \n",
      " 45  BsmtHalfBath   1460 non-null   int64  \n",
      " 46  FullBath       1460 non-null   int64  \n",
      " 47  HalfBath       1460 non-null   int64  \n",
      " 48  BedroomAbvGr   1460 non-null   int64  \n",
      " 49  KitchenAbvGr   1460 non-null   int64  \n",
      " 50  KitchenQual    1460 non-null   int64  \n",
      " 51  TotRmsAbvGrd   1460 non-null   int64  \n",
      " 52  Functional     1460 non-null   int64  \n",
      " 53  Fireplaces     1460 non-null   int64  \n",
      " 54  FireplaceQu    1460 non-null   int64  \n",
      " 55  GarageType     1460 non-null   int64  \n",
      " 56  GarageCars     1460 non-null   int64  \n",
      " 57  GarageArea     1460 non-null   int64  \n",
      " 58  GarageQual     1460 non-null   int64  \n",
      " 59  GarageCond     1460 non-null   int64  \n",
      " 60  PavedDrive     1460 non-null   int64  \n",
      " 61  WoodDeckSF     1460 non-null   int64  \n",
      " 62  OpenPorchSF    1460 non-null   int64  \n",
      " 63  EnclosedPorch  1460 non-null   int64  \n",
      " 64  3SsnPorch      1460 non-null   int64  \n",
      " 65  ScreenPorch    1460 non-null   int64  \n",
      " 66  PoolArea       1460 non-null   int64  \n",
      " 67  PoolQC         1460 non-null   int64  \n",
      " 68  Fence          1460 non-null   int64  \n",
      " 69  MiscFeature    1460 non-null   int64  \n",
      " 70  MiscVal        1460 non-null   int64  \n",
      " 71  MoSold         1460 non-null   int64  \n",
      " 72  SaleType       1460 non-null   int64  \n",
      " 73  SaleCondition  1460 non-null   int64  \n",
      " 74  SalePrice      1460 non-null   int64  \n",
      "dtypes: float64(2), int64(73)\n",
      "memory usage: 855.6 KB\n"
     ]
    }
   ],
   "source": [
    "X2.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "political-jonathan",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:23.578661Z",
     "iopub.status.busy": "2021-04-21T07:52:23.577894Z",
     "iopub.status.idle": "2021-04-21T07:52:23.581124Z",
     "shell.execute_reply": "2021-04-21T07:52:23.582063Z"
    },
    "papermill": {
     "duration": 0.058331,
     "end_time": "2021-04-21T07:52:23.582256",
     "exception": false,
     "start_time": "2021-04-21T07:52:23.523925",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 2   LotFrontage    1460 non-null   float64\n",
    "# 23  MasVnrArea     1460 non-null   float64\n",
    "trainData['LotFrontage'] =  trainData['LotFrontage'].astype(int)\n",
    "trainData['MasVnrArea'] =  trainData['MasVnrArea'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "featured-linux",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:23.684595Z",
     "iopub.status.busy": "2021-04-21T07:52:23.683920Z",
     "iopub.status.idle": "2021-04-21T07:52:23.689437Z",
     "shell.execute_reply": "2021-04-21T07:52:23.690079Z"
    },
    "papermill": {
     "duration": 0.057736,
     "end_time": "2021-04-21T07:52:23.690266",
     "exception": false,
     "start_time": "2021-04-21T07:52:23.632530",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 2   LotFrontage    1460 non-null   float64\n",
    "# 23  MasVnrArea     1460 non-null   float64\n",
    "testDf['LotFrontage'] =  testDf['LotFrontage'].astype(int)\n",
    "testDf['MasVnrArea'] =  testDf['MasVnrArea'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "buried-collection",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:23.793228Z",
     "iopub.status.busy": "2021-04-21T07:52:23.792400Z",
     "iopub.status.idle": "2021-04-21T07:52:23.816307Z",
     "shell.execute_reply": "2021-04-21T07:52:23.817103Z"
    },
    "papermill": {
     "duration": 0.077238,
     "end_time": "2021-04-21T07:52:23.817314",
     "exception": false,
     "start_time": "2021-04-21T07:52:23.740076",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1460 entries, 0 to 1459\n",
      "Data columns (total 81 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   Id             1460 non-null   int64  \n",
      " 1   MSSubClass     1460 non-null   int64  \n",
      " 2   MSZoning       1460 non-null   int64  \n",
      " 3   LotFrontage    1460 non-null   int64  \n",
      " 4   LotArea        1460 non-null   int64  \n",
      " 5   Street         1460 non-null   int64  \n",
      " 6   Alley          1460 non-null   int64  \n",
      " 7   LotShape       1460 non-null   int64  \n",
      " 8   LandContour    1460 non-null   int64  \n",
      " 9   Utilities      1460 non-null   int64  \n",
      " 10  LotConfig      1460 non-null   int64  \n",
      " 11  LandSlope      1460 non-null   int64  \n",
      " 12  Neighborhood   1460 non-null   int64  \n",
      " 13  Condition1     1460 non-null   int64  \n",
      " 14  Condition2     1460 non-null   int64  \n",
      " 15  BldgType       1460 non-null   int64  \n",
      " 16  HouseStyle     1460 non-null   int64  \n",
      " 17  OverallQual    1460 non-null   int64  \n",
      " 18  OverallCond    1460 non-null   int64  \n",
      " 19  YearBuilt      1460 non-null   int64  \n",
      " 20  YearRemodAdd   1460 non-null   int64  \n",
      " 21  RoofStyle      1460 non-null   int64  \n",
      " 22  RoofMatl       1460 non-null   int64  \n",
      " 23  Exterior1st    1460 non-null   int64  \n",
      " 24  Exterior2nd    1460 non-null   int64  \n",
      " 25  MasVnrType     1460 non-null   int64  \n",
      " 26  MasVnrArea     1460 non-null   int64  \n",
      " 27  ExterQual      1460 non-null   int64  \n",
      " 28  ExterCond      1460 non-null   int64  \n",
      " 29  Foundation     1460 non-null   int64  \n",
      " 30  BsmtQual       1460 non-null   int64  \n",
      " 31  BsmtCond       1460 non-null   int64  \n",
      " 32  BsmtExposure   1460 non-null   int64  \n",
      " 33  BsmtFinType1   1460 non-null   int64  \n",
      " 34  BsmtFinSF1     1460 non-null   int64  \n",
      " 35  BsmtFinType2   1460 non-null   int64  \n",
      " 36  BsmtFinSF2     1460 non-null   int64  \n",
      " 37  BsmtUnfSF      1460 non-null   int64  \n",
      " 38  TotalBsmtSF    1460 non-null   int64  \n",
      " 39  Heating        1460 non-null   int64  \n",
      " 40  HeatingQC      1460 non-null   int64  \n",
      " 41  CentralAir     1460 non-null   int64  \n",
      " 42  Electrical     1460 non-null   int64  \n",
      " 43  1stFlrSF       1460 non-null   int64  \n",
      " 44  2ndFlrSF       1460 non-null   int64  \n",
      " 45  LowQualFinSF   1460 non-null   int64  \n",
      " 46  GrLivArea      1460 non-null   int64  \n",
      " 47  BsmtFullBath   1460 non-null   int64  \n",
      " 48  BsmtHalfBath   1460 non-null   int64  \n",
      " 49  FullBath       1460 non-null   int64  \n",
      " 50  HalfBath       1460 non-null   int64  \n",
      " 51  BedroomAbvGr   1460 non-null   int64  \n",
      " 52  KitchenAbvGr   1460 non-null   int64  \n",
      " 53  KitchenQual    1460 non-null   int64  \n",
      " 54  TotRmsAbvGrd   1460 non-null   int64  \n",
      " 55  Functional     1460 non-null   int64  \n",
      " 56  Fireplaces     1460 non-null   int64  \n",
      " 57  FireplaceQu    1460 non-null   int64  \n",
      " 58  GarageType     1460 non-null   int64  \n",
      " 59  GarageYrBlt    1460 non-null   float64\n",
      " 60  GarageFinish   1460 non-null   int64  \n",
      " 61  GarageCars     1460 non-null   int64  \n",
      " 62  GarageArea     1460 non-null   int64  \n",
      " 63  GarageQual     1460 non-null   int64  \n",
      " 64  GarageCond     1460 non-null   int64  \n",
      " 65  PavedDrive     1460 non-null   int64  \n",
      " 66  WoodDeckSF     1460 non-null   int64  \n",
      " 67  OpenPorchSF    1460 non-null   int64  \n",
      " 68  EnclosedPorch  1460 non-null   int64  \n",
      " 69  3SsnPorch      1460 non-null   int64  \n",
      " 70  ScreenPorch    1460 non-null   int64  \n",
      " 71  PoolArea       1460 non-null   int64  \n",
      " 72  PoolQC         1460 non-null   int64  \n",
      " 73  Fence          1460 non-null   int64  \n",
      " 74  MiscFeature    1460 non-null   int64  \n",
      " 75  MiscVal        1460 non-null   int64  \n",
      " 76  MoSold         1460 non-null   int64  \n",
      " 77  YrSold         1460 non-null   int64  \n",
      " 78  SaleType       1460 non-null   int64  \n",
      " 79  SaleCondition  1460 non-null   int64  \n",
      " 80  SalePrice      1460 non-null   int64  \n",
      "dtypes: float64(1), int64(80)\n",
      "memory usage: 924.0 KB\n"
     ]
    }
   ],
   "source": [
    "trainData.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "bibliographic-spoke",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:23.923449Z",
     "iopub.status.busy": "2021-04-21T07:52:23.922802Z",
     "iopub.status.idle": "2021-04-21T07:52:23.930851Z",
     "shell.execute_reply": "2021-04-21T07:52:23.930275Z"
    },
    "papermill": {
     "duration": 0.062425,
     "end_time": "2021-04-21T07:52:23.930997",
     "exception": false,
     "start_time": "2021-04-21T07:52:23.868572",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       2003\n",
       "1       1976\n",
       "2       2001\n",
       "3       1998\n",
       "4       2000\n",
       "        ... \n",
       "1455    1999\n",
       "1456    1978\n",
       "1457    1941\n",
       "1458    1950\n",
       "1459    1965\n",
       "Name: GarageYrBlt, Length: 1460, dtype: int64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trainData['GarageYrBlt'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "baking-income",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:24.038972Z",
     "iopub.status.busy": "2021-04-21T07:52:24.038034Z",
     "iopub.status.idle": "2021-04-21T07:52:24.041776Z",
     "shell.execute_reply": "2021-04-21T07:52:24.042287Z"
    },
    "papermill": {
     "duration": 0.06125,
     "end_time": "2021-04-21T07:52:24.042464",
     "exception": false,
     "start_time": "2021-04-21T07:52:23.981214",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       1961\n",
       "1       1958\n",
       "2       1997\n",
       "3       1998\n",
       "4       1992\n",
       "        ... \n",
       "1454    1970\n",
       "1455    1970\n",
       "1456    1960\n",
       "1457    1976\n",
       "1458    1993\n",
       "Name: GarageYrBlt, Length: 1459, dtype: int64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "testDf['GarageYrBlt'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "later-heaven",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:24.150923Z",
     "iopub.status.busy": "2021-04-21T07:52:24.149969Z",
     "iopub.status.idle": "2021-04-21T07:52:24.168458Z",
     "shell.execute_reply": "2021-04-21T07:52:24.169238Z"
    },
    "papermill": {
     "duration": 0.075078,
     "end_time": "2021-04-21T07:52:24.169447",
     "exception": false,
     "start_time": "2021-04-21T07:52:24.094369",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1460 entries, 0 to 1459\n",
      "Data columns (total 81 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   Id             1460 non-null   int64  \n",
      " 1   MSSubClass     1460 non-null   int64  \n",
      " 2   MSZoning       1460 non-null   int64  \n",
      " 3   LotFrontage    1460 non-null   int64  \n",
      " 4   LotArea        1460 non-null   int64  \n",
      " 5   Street         1460 non-null   int64  \n",
      " 6   Alley          1460 non-null   int64  \n",
      " 7   LotShape       1460 non-null   int64  \n",
      " 8   LandContour    1460 non-null   int64  \n",
      " 9   Utilities      1460 non-null   int64  \n",
      " 10  LotConfig      1460 non-null   int64  \n",
      " 11  LandSlope      1460 non-null   int64  \n",
      " 12  Neighborhood   1460 non-null   int64  \n",
      " 13  Condition1     1460 non-null   int64  \n",
      " 14  Condition2     1460 non-null   int64  \n",
      " 15  BldgType       1460 non-null   int64  \n",
      " 16  HouseStyle     1460 non-null   int64  \n",
      " 17  OverallQual    1460 non-null   int64  \n",
      " 18  OverallCond    1460 non-null   int64  \n",
      " 19  YearBuilt      1460 non-null   int64  \n",
      " 20  YearRemodAdd   1460 non-null   int64  \n",
      " 21  RoofStyle      1460 non-null   int64  \n",
      " 22  RoofMatl       1460 non-null   int64  \n",
      " 23  Exterior1st    1460 non-null   int64  \n",
      " 24  Exterior2nd    1460 non-null   int64  \n",
      " 25  MasVnrType     1460 non-null   int64  \n",
      " 26  MasVnrArea     1460 non-null   int64  \n",
      " 27  ExterQual      1460 non-null   int64  \n",
      " 28  ExterCond      1460 non-null   int64  \n",
      " 29  Foundation     1460 non-null   int64  \n",
      " 30  BsmtQual       1460 non-null   int64  \n",
      " 31  BsmtCond       1460 non-null   int64  \n",
      " 32  BsmtExposure   1460 non-null   int64  \n",
      " 33  BsmtFinType1   1460 non-null   int64  \n",
      " 34  BsmtFinSF1     1460 non-null   int64  \n",
      " 35  BsmtFinType2   1460 non-null   int64  \n",
      " 36  BsmtFinSF2     1460 non-null   int64  \n",
      " 37  BsmtUnfSF      1460 non-null   int64  \n",
      " 38  TotalBsmtSF    1460 non-null   int64  \n",
      " 39  Heating        1460 non-null   int64  \n",
      " 40  HeatingQC      1460 non-null   int64  \n",
      " 41  CentralAir     1460 non-null   int64  \n",
      " 42  Electrical     1460 non-null   int64  \n",
      " 43  1stFlrSF       1460 non-null   int64  \n",
      " 44  2ndFlrSF       1460 non-null   int64  \n",
      " 45  LowQualFinSF   1460 non-null   int64  \n",
      " 46  GrLivArea      1460 non-null   int64  \n",
      " 47  BsmtFullBath   1460 non-null   int64  \n",
      " 48  BsmtHalfBath   1460 non-null   int64  \n",
      " 49  FullBath       1460 non-null   int64  \n",
      " 50  HalfBath       1460 non-null   int64  \n",
      " 51  BedroomAbvGr   1460 non-null   int64  \n",
      " 52  KitchenAbvGr   1460 non-null   int64  \n",
      " 53  KitchenQual    1460 non-null   int64  \n",
      " 54  TotRmsAbvGrd   1460 non-null   int64  \n",
      " 55  Functional     1460 non-null   int64  \n",
      " 56  Fireplaces     1460 non-null   int64  \n",
      " 57  FireplaceQu    1460 non-null   int64  \n",
      " 58  GarageType     1460 non-null   int64  \n",
      " 59  GarageYrBlt    1460 non-null   float64\n",
      " 60  GarageFinish   1460 non-null   int64  \n",
      " 61  GarageCars     1460 non-null   int64  \n",
      " 62  GarageArea     1460 non-null   int64  \n",
      " 63  GarageQual     1460 non-null   int64  \n",
      " 64  GarageCond     1460 non-null   int64  \n",
      " 65  PavedDrive     1460 non-null   int64  \n",
      " 66  WoodDeckSF     1460 non-null   int64  \n",
      " 67  OpenPorchSF    1460 non-null   int64  \n",
      " 68  EnclosedPorch  1460 non-null   int64  \n",
      " 69  3SsnPorch      1460 non-null   int64  \n",
      " 70  ScreenPorch    1460 non-null   int64  \n",
      " 71  PoolArea       1460 non-null   int64  \n",
      " 72  PoolQC         1460 non-null   int64  \n",
      " 73  Fence          1460 non-null   int64  \n",
      " 74  MiscFeature    1460 non-null   int64  \n",
      " 75  MiscVal        1460 non-null   int64  \n",
      " 76  MoSold         1460 non-null   int64  \n",
      " 77  YrSold         1460 non-null   int64  \n",
      " 78  SaleType       1460 non-null   int64  \n",
      " 79  SaleCondition  1460 non-null   int64  \n",
      " 80  SalePrice      1460 non-null   int64  \n",
      "dtypes: float64(1), int64(80)\n",
      "memory usage: 924.0 KB\n"
     ]
    }
   ],
   "source": [
    "trainData.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "encouraging-marble",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:24.281078Z",
     "iopub.status.busy": "2021-04-21T07:52:24.280339Z",
     "iopub.status.idle": "2021-04-21T07:52:24.301526Z",
     "shell.execute_reply": "2021-04-21T07:52:24.300841Z"
    },
    "papermill": {
     "duration": 0.076664,
     "end_time": "2021-04-21T07:52:24.301680",
     "exception": false,
     "start_time": "2021-04-21T07:52:24.225016",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "trainData['GarageYrBlt'] = 2021 - trainData['GarageYrBlt']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "valuable-knock",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:24.414316Z",
     "iopub.status.busy": "2021-04-21T07:52:24.413549Z",
     "iopub.status.idle": "2021-04-21T07:52:24.416716Z",
     "shell.execute_reply": "2021-04-21T07:52:24.416163Z"
    },
    "papermill": {
     "duration": 0.061898,
     "end_time": "2021-04-21T07:52:24.416866",
     "exception": false,
     "start_time": "2021-04-21T07:52:24.354968",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "testDf['GarageYrBlt'] = 2021 - testDf['GarageYrBlt']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "exclusive-richardson",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:24.524037Z",
     "iopub.status.busy": "2021-04-21T07:52:24.523089Z",
     "iopub.status.idle": "2021-04-21T07:52:24.543796Z",
     "shell.execute_reply": "2021-04-21T07:52:24.543169Z"
    },
    "papermill": {
     "duration": 0.075958,
     "end_time": "2021-04-21T07:52:24.543941",
     "exception": false,
     "start_time": "2021-04-21T07:52:24.467983",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1460 entries, 0 to 1459\n",
      "Data columns (total 81 columns):\n",
      " #   Column         Non-Null Count  Dtype\n",
      "---  ------         --------------  -----\n",
      " 0   Id             1460 non-null   int64\n",
      " 1   MSSubClass     1460 non-null   int64\n",
      " 2   MSZoning       1460 non-null   int64\n",
      " 3   LotFrontage    1460 non-null   int64\n",
      " 4   LotArea        1460 non-null   int64\n",
      " 5   Street         1460 non-null   int64\n",
      " 6   Alley          1460 non-null   int64\n",
      " 7   LotShape       1460 non-null   int64\n",
      " 8   LandContour    1460 non-null   int64\n",
      " 9   Utilities      1460 non-null   int64\n",
      " 10  LotConfig      1460 non-null   int64\n",
      " 11  LandSlope      1460 non-null   int64\n",
      " 12  Neighborhood   1460 non-null   int64\n",
      " 13  Condition1     1460 non-null   int64\n",
      " 14  Condition2     1460 non-null   int64\n",
      " 15  BldgType       1460 non-null   int64\n",
      " 16  HouseStyle     1460 non-null   int64\n",
      " 17  OverallQual    1460 non-null   int64\n",
      " 18  OverallCond    1460 non-null   int64\n",
      " 19  YearBuilt      1460 non-null   int64\n",
      " 20  YearRemodAdd   1460 non-null   int64\n",
      " 21  RoofStyle      1460 non-null   int64\n",
      " 22  RoofMatl       1460 non-null   int64\n",
      " 23  Exterior1st    1460 non-null   int64\n",
      " 24  Exterior2nd    1460 non-null   int64\n",
      " 25  MasVnrType     1460 non-null   int64\n",
      " 26  MasVnrArea     1460 non-null   int64\n",
      " 27  ExterQual      1460 non-null   int64\n",
      " 28  ExterCond      1460 non-null   int64\n",
      " 29  Foundation     1460 non-null   int64\n",
      " 30  BsmtQual       1460 non-null   int64\n",
      " 31  BsmtCond       1460 non-null   int64\n",
      " 32  BsmtExposure   1460 non-null   int64\n",
      " 33  BsmtFinType1   1460 non-null   int64\n",
      " 34  BsmtFinSF1     1460 non-null   int64\n",
      " 35  BsmtFinType2   1460 non-null   int64\n",
      " 36  BsmtFinSF2     1460 non-null   int64\n",
      " 37  BsmtUnfSF      1460 non-null   int64\n",
      " 38  TotalBsmtSF    1460 non-null   int64\n",
      " 39  Heating        1460 non-null   int64\n",
      " 40  HeatingQC      1460 non-null   int64\n",
      " 41  CentralAir     1460 non-null   int64\n",
      " 42  Electrical     1460 non-null   int64\n",
      " 43  1stFlrSF       1460 non-null   int64\n",
      " 44  2ndFlrSF       1460 non-null   int64\n",
      " 45  LowQualFinSF   1460 non-null   int64\n",
      " 46  GrLivArea      1460 non-null   int64\n",
      " 47  BsmtFullBath   1460 non-null   int64\n",
      " 48  BsmtHalfBath   1460 non-null   int64\n",
      " 49  FullBath       1460 non-null   int64\n",
      " 50  HalfBath       1460 non-null   int64\n",
      " 51  BedroomAbvGr   1460 non-null   int64\n",
      " 52  KitchenAbvGr   1460 non-null   int64\n",
      " 53  KitchenQual    1460 non-null   int64\n",
      " 54  TotRmsAbvGrd   1460 non-null   int64\n",
      " 55  Functional     1460 non-null   int64\n",
      " 56  Fireplaces     1460 non-null   int64\n",
      " 57  FireplaceQu    1460 non-null   int64\n",
      " 58  GarageType     1460 non-null   int64\n",
      " 59  GarageYrBlt    1460 non-null   int64\n",
      " 60  GarageFinish   1460 non-null   int64\n",
      " 61  GarageCars     1460 non-null   int64\n",
      " 62  GarageArea     1460 non-null   int64\n",
      " 63  GarageQual     1460 non-null   int64\n",
      " 64  GarageCond     1460 non-null   int64\n",
      " 65  PavedDrive     1460 non-null   int64\n",
      " 66  WoodDeckSF     1460 non-null   int64\n",
      " 67  OpenPorchSF    1460 non-null   int64\n",
      " 68  EnclosedPorch  1460 non-null   int64\n",
      " 69  3SsnPorch      1460 non-null   int64\n",
      " 70  ScreenPorch    1460 non-null   int64\n",
      " 71  PoolArea       1460 non-null   int64\n",
      " 72  PoolQC         1460 non-null   int64\n",
      " 73  Fence          1460 non-null   int64\n",
      " 74  MiscFeature    1460 non-null   int64\n",
      " 75  MiscVal        1460 non-null   int64\n",
      " 76  MoSold         1460 non-null   int64\n",
      " 77  YrSold         1460 non-null   int64\n",
      " 78  SaleType       1460 non-null   int64\n",
      " 79  SaleCondition  1460 non-null   int64\n",
      " 80  SalePrice      1460 non-null   int64\n",
      "dtypes: int64(81)\n",
      "memory usage: 924.0 KB\n"
     ]
    }
   ],
   "source": [
    "trainData['GarageYrBlt'] = trainData['GarageYrBlt'].astype(int)\n",
    "trainData.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "finite-array",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:24.651287Z",
     "iopub.status.busy": "2021-04-21T07:52:24.650542Z",
     "iopub.status.idle": "2021-04-21T07:52:24.685821Z",
     "shell.execute_reply": "2021-04-21T07:52:24.685112Z"
    },
    "papermill": {
     "duration": 0.090078,
     "end_time": "2021-04-21T07:52:24.685985",
     "exception": false,
     "start_time": "2021-04-21T07:52:24.595907",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1459 entries, 0 to 1458\n",
      "Data columns (total 80 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   Id             1459 non-null   int64  \n",
      " 1   MSSubClass     1459 non-null   int64  \n",
      " 2   MSZoning       1459 non-null   int64  \n",
      " 3   LotFrontage    1459 non-null   int64  \n",
      " 4   LotArea        1459 non-null   int64  \n",
      " 5   Street         1459 non-null   int64  \n",
      " 6   Alley          1459 non-null   int64  \n",
      " 7   LotShape       1459 non-null   int64  \n",
      " 8   LandContour    1459 non-null   int64  \n",
      " 9   Utilities      1459 non-null   int64  \n",
      " 10  LotConfig      1459 non-null   int64  \n",
      " 11  LandSlope      1459 non-null   int64  \n",
      " 12  Neighborhood   1459 non-null   int64  \n",
      " 13  Condition1     1459 non-null   int64  \n",
      " 14  Condition2     1459 non-null   int64  \n",
      " 15  BldgType       1459 non-null   int64  \n",
      " 16  HouseStyle     1459 non-null   int64  \n",
      " 17  OverallQual    1459 non-null   int64  \n",
      " 18  OverallCond    1459 non-null   int64  \n",
      " 19  YearBuilt      1459 non-null   int64  \n",
      " 20  YearRemodAdd   1459 non-null   int64  \n",
      " 21  RoofStyle      1459 non-null   int64  \n",
      " 22  RoofMatl       1459 non-null   int64  \n",
      " 23  Exterior1st    1459 non-null   int64  \n",
      " 24  Exterior2nd    1459 non-null   int64  \n",
      " 25  MasVnrType     1459 non-null   int64  \n",
      " 26  MasVnrArea     1459 non-null   int64  \n",
      " 27  ExterQual      1459 non-null   int64  \n",
      " 28  ExterCond      1459 non-null   int64  \n",
      " 29  Foundation     1459 non-null   int64  \n",
      " 30  BsmtQual       1459 non-null   int64  \n",
      " 31  BsmtCond       1459 non-null   int64  \n",
      " 32  BsmtExposure   1459 non-null   int64  \n",
      " 33  BsmtFinType1   1459 non-null   int64  \n",
      " 34  BsmtFinSF1     1458 non-null   float64\n",
      " 35  BsmtFinType2   1459 non-null   int64  \n",
      " 36  BsmtFinSF2     1458 non-null   float64\n",
      " 37  BsmtUnfSF      1458 non-null   float64\n",
      " 38  TotalBsmtSF    1458 non-null   float64\n",
      " 39  Heating        1459 non-null   int64  \n",
      " 40  HeatingQC      1459 non-null   int64  \n",
      " 41  CentralAir     1459 non-null   int64  \n",
      " 42  Electrical     1459 non-null   int64  \n",
      " 43  1stFlrSF       1459 non-null   int64  \n",
      " 44  2ndFlrSF       1459 non-null   int64  \n",
      " 45  LowQualFinSF   1459 non-null   int64  \n",
      " 46  GrLivArea      1459 non-null   int64  \n",
      " 47  BsmtFullBath   1457 non-null   float64\n",
      " 48  BsmtHalfBath   1457 non-null   float64\n",
      " 49  FullBath       1459 non-null   int64  \n",
      " 50  HalfBath       1459 non-null   int64  \n",
      " 51  BedroomAbvGr   1459 non-null   int64  \n",
      " 52  KitchenAbvGr   1459 non-null   int64  \n",
      " 53  KitchenQual    1459 non-null   int64  \n",
      " 54  TotRmsAbvGrd   1459 non-null   int64  \n",
      " 55  Functional     1459 non-null   int64  \n",
      " 56  Fireplaces     1459 non-null   int64  \n",
      " 57  FireplaceQu    1459 non-null   int64  \n",
      " 58  GarageType     1459 non-null   int64  \n",
      " 59  GarageYrBlt    1459 non-null   int64  \n",
      " 60  GarageFinish   1459 non-null   int64  \n",
      " 61  GarageCars     1458 non-null   float64\n",
      " 62  GarageArea     1458 non-null   float64\n",
      " 63  GarageQual     1459 non-null   int64  \n",
      " 64  GarageCond     1459 non-null   int64  \n",
      " 65  PavedDrive     1459 non-null   int64  \n",
      " 66  WoodDeckSF     1459 non-null   int64  \n",
      " 67  OpenPorchSF    1459 non-null   int64  \n",
      " 68  EnclosedPorch  1459 non-null   int64  \n",
      " 69  3SsnPorch      1459 non-null   int64  \n",
      " 70  ScreenPorch    1459 non-null   int64  \n",
      " 71  PoolArea       1459 non-null   int64  \n",
      " 72  PoolQC         1459 non-null   int64  \n",
      " 73  Fence          1459 non-null   int64  \n",
      " 74  MiscFeature    1459 non-null   int64  \n",
      " 75  MiscVal        1459 non-null   int64  \n",
      " 76  MoSold         1459 non-null   int64  \n",
      " 77  YrSold         1459 non-null   int64  \n",
      " 78  SaleType       1459 non-null   int64  \n",
      " 79  SaleCondition  1459 non-null   int64  \n",
      "dtypes: float64(8), int64(72)\n",
      "memory usage: 912.0 KB\n"
     ]
    }
   ],
   "source": [
    "testDf['GarageYrBlt'] = testDf['GarageYrBlt'].astype(int)\n",
    "testDf.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "global-convenience",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:24.799796Z",
     "iopub.status.busy": "2021-04-21T07:52:24.798738Z",
     "iopub.status.idle": "2021-04-21T07:52:24.803738Z",
     "shell.execute_reply": "2021-04-21T07:52:24.803110Z"
    },
    "papermill": {
     "duration": 0.06391,
     "end_time": "2021-04-21T07:52:24.803895",
     "exception": false,
     "start_time": "2021-04-21T07:52:24.739985",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "Y = trainData['SalePrice']\n",
    "X = trainData.drop(columns=['SalePrice'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "alternative-jaguar",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:24.913146Z",
     "iopub.status.busy": "2021-04-21T07:52:24.912448Z",
     "iopub.status.idle": "2021-04-21T07:52:24.931284Z",
     "shell.execute_reply": "2021-04-21T07:52:24.932265Z"
    },
    "papermill": {
     "duration": 0.075682,
     "end_time": "2021-04-21T07:52:24.932540",
     "exception": false,
     "start_time": "2021-04-21T07:52:24.856858",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1460 entries, 0 to 1459\n",
      "Data columns (total 80 columns):\n",
      " #   Column         Non-Null Count  Dtype\n",
      "---  ------         --------------  -----\n",
      " 0   Id             1460 non-null   int64\n",
      " 1   MSSubClass     1460 non-null   int64\n",
      " 2   MSZoning       1460 non-null   int64\n",
      " 3   LotFrontage    1460 non-null   int64\n",
      " 4   LotArea        1460 non-null   int64\n",
      " 5   Street         1460 non-null   int64\n",
      " 6   Alley          1460 non-null   int64\n",
      " 7   LotShape       1460 non-null   int64\n",
      " 8   LandContour    1460 non-null   int64\n",
      " 9   Utilities      1460 non-null   int64\n",
      " 10  LotConfig      1460 non-null   int64\n",
      " 11  LandSlope      1460 non-null   int64\n",
      " 12  Neighborhood   1460 non-null   int64\n",
      " 13  Condition1     1460 non-null   int64\n",
      " 14  Condition2     1460 non-null   int64\n",
      " 15  BldgType       1460 non-null   int64\n",
      " 16  HouseStyle     1460 non-null   int64\n",
      " 17  OverallQual    1460 non-null   int64\n",
      " 18  OverallCond    1460 non-null   int64\n",
      " 19  YearBuilt      1460 non-null   int64\n",
      " 20  YearRemodAdd   1460 non-null   int64\n",
      " 21  RoofStyle      1460 non-null   int64\n",
      " 22  RoofMatl       1460 non-null   int64\n",
      " 23  Exterior1st    1460 non-null   int64\n",
      " 24  Exterior2nd    1460 non-null   int64\n",
      " 25  MasVnrType     1460 non-null   int64\n",
      " 26  MasVnrArea     1460 non-null   int64\n",
      " 27  ExterQual      1460 non-null   int64\n",
      " 28  ExterCond      1460 non-null   int64\n",
      " 29  Foundation     1460 non-null   int64\n",
      " 30  BsmtQual       1460 non-null   int64\n",
      " 31  BsmtCond       1460 non-null   int64\n",
      " 32  BsmtExposure   1460 non-null   int64\n",
      " 33  BsmtFinType1   1460 non-null   int64\n",
      " 34  BsmtFinSF1     1460 non-null   int64\n",
      " 35  BsmtFinType2   1460 non-null   int64\n",
      " 36  BsmtFinSF2     1460 non-null   int64\n",
      " 37  BsmtUnfSF      1460 non-null   int64\n",
      " 38  TotalBsmtSF    1460 non-null   int64\n",
      " 39  Heating        1460 non-null   int64\n",
      " 40  HeatingQC      1460 non-null   int64\n",
      " 41  CentralAir     1460 non-null   int64\n",
      " 42  Electrical     1460 non-null   int64\n",
      " 43  1stFlrSF       1460 non-null   int64\n",
      " 44  2ndFlrSF       1460 non-null   int64\n",
      " 45  LowQualFinSF   1460 non-null   int64\n",
      " 46  GrLivArea      1460 non-null   int64\n",
      " 47  BsmtFullBath   1460 non-null   int64\n",
      " 48  BsmtHalfBath   1460 non-null   int64\n",
      " 49  FullBath       1460 non-null   int64\n",
      " 50  HalfBath       1460 non-null   int64\n",
      " 51  BedroomAbvGr   1460 non-null   int64\n",
      " 52  KitchenAbvGr   1460 non-null   int64\n",
      " 53  KitchenQual    1460 non-null   int64\n",
      " 54  TotRmsAbvGrd   1460 non-null   int64\n",
      " 55  Functional     1460 non-null   int64\n",
      " 56  Fireplaces     1460 non-null   int64\n",
      " 57  FireplaceQu    1460 non-null   int64\n",
      " 58  GarageType     1460 non-null   int64\n",
      " 59  GarageYrBlt    1460 non-null   int64\n",
      " 60  GarageFinish   1460 non-null   int64\n",
      " 61  GarageCars     1460 non-null   int64\n",
      " 62  GarageArea     1460 non-null   int64\n",
      " 63  GarageQual     1460 non-null   int64\n",
      " 64  GarageCond     1460 non-null   int64\n",
      " 65  PavedDrive     1460 non-null   int64\n",
      " 66  WoodDeckSF     1460 non-null   int64\n",
      " 67  OpenPorchSF    1460 non-null   int64\n",
      " 68  EnclosedPorch  1460 non-null   int64\n",
      " 69  3SsnPorch      1460 non-null   int64\n",
      " 70  ScreenPorch    1460 non-null   int64\n",
      " 71  PoolArea       1460 non-null   int64\n",
      " 72  PoolQC         1460 non-null   int64\n",
      " 73  Fence          1460 non-null   int64\n",
      " 74  MiscFeature    1460 non-null   int64\n",
      " 75  MiscVal        1460 non-null   int64\n",
      " 76  MoSold         1460 non-null   int64\n",
      " 77  YrSold         1460 non-null   int64\n",
      " 78  SaleType       1460 non-null   int64\n",
      " 79  SaleCondition  1460 non-null   int64\n",
      "dtypes: int64(80)\n",
      "memory usage: 912.6 KB\n"
     ]
    }
   ],
   "source": [
    "X.info()\n",
    "xColumns = X.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "about-flooring",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:25.046128Z",
     "iopub.status.busy": "2021-04-21T07:52:25.045317Z",
     "iopub.status.idle": "2021-04-21T07:52:26.060286Z",
     "shell.execute_reply": "2021-04-21T07:52:26.059567Z"
    },
    "papermill": {
     "duration": 1.073461,
     "end_time": "2021-04-21T07:52:26.060431",
     "exception": false,
     "start_time": "2021-04-21T07:52:24.986970",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OverallQual     0.498422\n",
       "GarageCars      0.339984\n",
       "YearBuilt       0.271064\n",
       "FullBath        0.261907\n",
       "YearRemodAdd    0.229545\n",
       "FireplaceQu     0.186694\n",
       "Fireplaces      0.163440\n",
       "BsmtFinSF1      0.120907\n",
       "LotFrontage     0.108303\n",
       "GarageCond      0.094958\n",
       "SaleType        0.089227\n",
       "LotShape        0.085182\n",
       "HalfBath        0.077489\n",
       "PavedDrive      0.067381\n",
       "BedroomAbvGr    0.060125\n",
       "MSSubClass      0.048297\n",
       "Exterior2nd     0.042038\n",
       "Fence           0.035284\n",
       "Condition1      0.028785\n",
       "YrSold          0.019835\n",
       "BsmtHalfBath    0.017397\n",
       "Functional      0.009718\n",
       "BsmtFinSF2      0.007582\n",
       "LowQualFinSF    0.005025\n",
       "Utilities       0.000000\n",
       "PoolArea        0.000000\n",
       "MoSold          0.000000\n",
       "Name: MI Scores, dtype: float64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.feature_selection import mutual_info_regression\n",
    "\n",
    "def make_mi_scores(X, Y, discrete_features):\n",
    "    mi_scores = mutual_info_regression(X, Y, discrete_features='auto')\n",
    "    mi_scores = pd.Series(mi_scores, name=\"MI Scores\", index=X.columns)\n",
    "    mi_scores = mi_scores.sort_values(ascending=False)\n",
    "    return mi_scores\n",
    "\n",
    "mi_scores = make_mi_scores(X, Y, xColumns)\n",
    "mi_scores[::3]  # show a few features with their MI scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "sound-leone",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:26.191212Z",
     "iopub.status.busy": "2021-04-21T07:52:26.190034Z",
     "iopub.status.idle": "2021-04-21T07:52:27.702298Z",
     "shell.execute_reply": "2021-04-21T07:52:27.701673Z"
    },
    "papermill": {
     "duration": 1.587301,
     "end_time": "2021-04-21T07:52:27.702439",
     "exception": false,
     "start_time": "2021-04-21T07:52:26.115138",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1500x2000 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_mi_scores(scores):\n",
    "    scores = scores.sort_values(ascending=True)\n",
    "    width = np.arange(len(scores))\n",
    "    ticks = list(scores.index)\n",
    "    plt.barh(width, scores)\n",
    "    plt.yticks(width, ticks)\n",
    "    plt.title(\"Mutual Information Scores\")\n",
    "\n",
    "\n",
    "plt.figure(dpi=100, figsize=(15, 20))\n",
    "plot_mi_scores(mi_scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "pending-gates",
   "metadata": {
    "papermill": {
     "duration": 0.05796,
     "end_time": "2021-04-21T07:52:27.819383",
     "exception": false,
     "start_time": "2021-04-21T07:52:27.761423",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "acceptable-plant",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:27.953021Z",
     "iopub.status.busy": "2021-04-21T07:52:27.944398Z",
     "iopub.status.idle": "2021-04-21T07:52:28.238454Z",
     "shell.execute_reply": "2021-04-21T07:52:28.237800Z"
    },
    "papermill": {
     "duration": 0.361003,
     "end_time": "2021-04-21T07:52:28.238615",
     "exception": false,
     "start_time": "2021-04-21T07:52:27.877612",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.relplot(x=\"OverallQual\", y=\"SalePrice\", data=X2);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "painful-presence",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:28.363348Z",
     "iopub.status.busy": "2021-04-21T07:52:28.362726Z",
     "iopub.status.idle": "2021-04-21T07:52:28.368072Z",
     "shell.execute_reply": "2021-04-21T07:52:28.367375Z"
    },
    "papermill": {
     "duration": 0.069876,
     "end_time": "2021-04-21T07:52:28.368231",
     "exception": false,
     "start_time": "2021-04-21T07:52:28.298355",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-40-06fd5df26a32>, line 7)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-40-06fd5df26a32>\"\u001b[0;36m, line \u001b[0;32m7\u001b[0m\n\u001b[0;31m    ---\u001b[0m\n\u001b[0m       ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "#OverallQual     0.574495\n",
    "#GrLivArea       0.433362\n",
    "#GarageCars      0.362797\n",
    "#ExterQual       0.322553\n",
    "#FullBath        0.259742\n",
    "#TotRmsAbvGrd    0.213118\n",
    "---\n",
    "OverallQual      0.509419\n",
    "ExterQual        0.341680\n",
    "GarageArea       0.293003\n",
    "FullBath         0.250962\n",
    "GarageType       0.206813"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "caroline-expert",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:28.496649Z",
     "iopub.status.busy": "2021-04-21T07:52:28.495964Z",
     "iopub.status.idle": "2021-04-21T07:52:28.498715Z",
     "shell.execute_reply": "2021-04-21T07:52:28.499178Z"
    },
    "papermill": {
     "duration": 0.068876,
     "end_time": "2021-04-21T07:52:28.499355",
     "exception": false,
     "start_time": "2021-04-21T07:52:28.430479",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "features = {'OverallQual','ExterQual','GarageArea','FullBath','GarageType'}\n",
    "X= X[features]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "meaning-diesel",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:28.627174Z",
     "iopub.status.busy": "2021-04-21T07:52:28.626456Z",
     "iopub.status.idle": "2021-04-21T07:52:28.631000Z",
     "shell.execute_reply": "2021-04-21T07:52:28.630321Z"
    },
    "papermill": {
     "duration": 0.069772,
     "end_time": "2021-04-21T07:52:28.631145",
     "exception": false,
     "start_time": "2021-04-21T07:52:28.561373",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1460, 1460)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(X),len(Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "accepting-singapore",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:28.763588Z",
     "iopub.status.busy": "2021-04-21T07:52:28.762199Z",
     "iopub.status.idle": "2021-04-21T07:52:28.767573Z",
     "shell.execute_reply": "2021-04-21T07:52:28.766901Z"
    },
    "papermill": {
     "duration": 0.071173,
     "end_time": "2021-04-21T07:52:28.767732",
     "exception": false,
     "start_time": "2021-04-21T07:52:28.696559",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, Y,test_size = 0.2, random_state=42)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "approximate-austin",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:28.898300Z",
     "iopub.status.busy": "2021-04-21T07:52:28.896615Z",
     "iopub.status.idle": "2021-04-21T07:52:28.902123Z",
     "shell.execute_reply": "2021-04-21T07:52:28.901387Z"
    },
    "papermill": {
     "duration": 0.073967,
     "end_time": "2021-04-21T07:52:28.902283",
     "exception": false,
     "start_time": "2021-04-21T07:52:28.828316",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1168, 1168)"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(X_train),len(y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "nominated-spray",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:29.038116Z",
     "iopub.status.busy": "2021-04-21T07:52:29.037324Z",
     "iopub.status.idle": "2021-04-21T07:52:29.089379Z",
     "shell.execute_reply": "2021-04-21T07:52:29.090400Z"
    },
    "papermill": {
     "duration": 0.122699,
     "end_time": "2021-04-21T07:52:29.090623",
     "exception": false,
     "start_time": "2021-04-21T07:52:28.967924",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "DM_train = xgb.DMatrix(data = X_train, \n",
    "                       label = y_train)  \n",
    "DM_test =  xgb.DMatrix(data = X_test,\n",
    "                       label = y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "grand-parking",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:29.228640Z",
     "iopub.status.busy": "2021-04-21T07:52:29.227683Z",
     "iopub.status.idle": "2021-04-21T07:52:29.230126Z",
     "shell.execute_reply": "2021-04-21T07:52:29.230645Z"
    },
    "papermill": {
     "duration": 0.06905,
     "end_time": "2021-04-21T07:52:29.230844",
     "exception": false,
     "start_time": "2021-04-21T07:52:29.161794",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "gbm_param_grid = {\n",
    "     'colsample_bytree': np.linspace(0.5, 0.9, 5),\n",
    "     'n_estimators':[100, 200],\n",
    "     'max_depth': [10, 15, 20, 25]\n",
    "}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "indirect-cliff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:29.359939Z",
     "iopub.status.busy": "2021-04-21T07:52:29.359274Z",
     "iopub.status.idle": "2021-04-21T07:52:29.361468Z",
     "shell.execute_reply": "2021-04-21T07:52:29.361946Z"
    },
    "papermill": {
     "duration": 0.068818,
     "end_time": "2021-04-21T07:52:29.362120",
     "exception": false,
     "start_time": "2021-04-21T07:52:29.293302",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "gbm = xgb.XGBRegressor()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "loose-office",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:29.493485Z",
     "iopub.status.busy": "2021-04-21T07:52:29.492828Z",
     "iopub.status.idle": "2021-04-21T07:52:29.497656Z",
     "shell.execute_reply": "2021-04-21T07:52:29.498185Z"
    },
    "papermill": {
     "duration": 0.071882,
     "end_time": "2021-04-21T07:52:29.498362",
     "exception": false,
     "start_time": "2021-04-21T07:52:29.426480",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "grid_mse = GridSearchCV(estimator = gbm, param_grid = gbm_param_grid, scoring = 'neg_mean_squared_error', cv = 5, verbose = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "neural-lawyer",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:52:29.632117Z",
     "iopub.status.busy": "2021-04-21T07:52:29.631303Z",
     "iopub.status.idle": "2021-04-21T07:54:00.431367Z",
     "shell.execute_reply": "2021-04-21T07:54:00.431895Z"
    },
    "papermill": {
     "duration": 90.869349,
     "end_time": "2021-04-21T07:54:00.432079",
     "exception": false,
     "start_time": "2021-04-21T07:52:29.562730",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 40 candidates, totalling 200 fits\n",
      "Best parameters found:  {'colsample_bytree': 0.6, 'max_depth': 10, 'n_estimators': 100}\n",
      "Lowest RMSE found:  42731.392935635806\n"
     ]
    }
   ],
   "source": [
    "grid_mse.fit(X_train, y_train)\n",
    "print(\"Best parameters found: \",grid_mse.best_params_)\n",
    "print(\"Lowest RMSE found: \", np.sqrt(np.abs(grid_mse.best_score_)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "legislative-wealth",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:54:00.566347Z",
     "iopub.status.busy": "2021-04-21T07:54:00.565362Z",
     "iopub.status.idle": "2021-04-21T07:54:00.569308Z",
     "shell.execute_reply": "2021-04-21T07:54:00.573533Z"
    },
    "papermill": {
     "duration": 0.080254,
     "end_time": "2021-04-21T07:54:00.573771",
     "exception": false,
     "start_time": "2021-04-21T07:54:00.493517",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pred = grid_mse.predict(X_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "dietary-borough",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:54:00.711109Z",
     "iopub.status.busy": "2021-04-21T07:54:00.710401Z",
     "iopub.status.idle": "2021-04-21T07:54:00.715541Z",
     "shell.execute_reply": "2021-04-21T07:54:00.716094Z"
    },
    "papermill": {
     "duration": 0.07936,
     "end_time": "2021-04-21T07:54:00.716278",
     "exception": false,
     "start_time": "2021-04-21T07:54:00.636918",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OverallQual</th>\n",
       "      <th>ExterQual</th>\n",
       "      <th>GarageType</th>\n",
       "      <th>FullBath</th>\n",
       "      <th>GarageArea</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>892</th>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1105</th>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>712</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>413</th>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>360</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>522</th>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>420</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1036</th>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>912</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>479</th>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>672</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1361</th>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>430</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>802</th>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>651</th>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>296</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>722</th>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>463</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>292 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      OverallQual  ExterQual  GarageType  FullBath  GarageArea\n",
       "892             6          3           1         1         264\n",
       "1105            8          2           1         2         712\n",
       "413             5          3           5         1         360\n",
       "522             6          3           5         2         420\n",
       "1036            9          2           1         2         912\n",
       "...           ...        ...         ...       ...         ...\n",
       "479             4          3           5         1         672\n",
       "1361            7          2           1         2         430\n",
       "802             7          2           1         2         410\n",
       "651             4          3           5         1         296\n",
       "722             4          3           5         1         463\n",
       "\n",
       "[292 rows x 5 columns]"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "smooth-feelings",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:54:00.849881Z",
     "iopub.status.busy": "2021-04-21T07:54:00.849078Z",
     "iopub.status.idle": "2021-04-21T07:54:00.854453Z",
     "shell.execute_reply": "2021-04-21T07:54:00.855168Z"
    },
    "papermill": {
     "duration": 0.075348,
     "end_time": "2021-04-21T07:54:00.855371",
     "exception": false,
     "start_time": "2021-04-21T07:54:00.780023",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "292"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "sensitive-commerce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:54:00.991785Z",
     "iopub.status.busy": "2021-04-21T07:54:00.991119Z",
     "iopub.status.idle": "2021-04-21T07:54:00.998881Z",
     "shell.execute_reply": "2021-04-21T07:54:00.999333Z"
    },
    "papermill": {
     "duration": 0.075312,
     "end_time": "2021-04-21T07:54:00.999548",
     "exception": false,
     "start_time": "2021-04-21T07:54:00.924236",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6852488331721354"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import mean_squared_error,r2_score\n",
    "(mean_squared_error(y_test,pred))**0.5\n",
    "r2_score(y_test,pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "animated-fighter",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:54:01.134042Z",
     "iopub.status.busy": "2021-04-21T07:54:01.132750Z",
     "iopub.status.idle": "2021-04-21T07:54:01.139311Z",
     "shell.execute_reply": "2021-04-21T07:54:01.139812Z"
    },
    "papermill": {
     "duration": 0.074837,
     "end_time": "2021-04-21T07:54:01.139997",
     "exception": false,
     "start_time": "2021-04-21T07:54:01.065160",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_test2 = testDf[features]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "above-transport",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:54:01.270665Z",
     "iopub.status.busy": "2021-04-21T07:54:01.269973Z",
     "iopub.status.idle": "2021-04-21T07:54:01.280027Z",
     "shell.execute_reply": "2021-04-21T07:54:01.280570Z"
    },
    "papermill": {
     "duration": 0.077205,
     "end_time": "2021-04-21T07:54:01.280776",
     "exception": false,
     "start_time": "2021-04-21T07:54:01.203571",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "predForTestDf = grid_mse.predict(X_test2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "parliamentary-radiation",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:54:01.416521Z",
     "iopub.status.busy": "2021-04-21T07:54:01.415863Z",
     "iopub.status.idle": "2021-04-21T07:54:01.419054Z",
     "shell.execute_reply": "2021-04-21T07:54:01.418563Z"
    },
    "papermill": {
     "duration": 0.072398,
     "end_time": "2021-04-21T07:54:01.419194",
     "exception": false,
     "start_time": "2021-04-21T07:54:01.346796",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "testSubmission = pd.DataFrame({'Id':testDf['Id'],'SalePrice':predForTestDf})\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "molecular-drilling",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-21T07:54:01.550438Z",
     "iopub.status.busy": "2021-04-21T07:54:01.549820Z",
     "iopub.status.idle": "2021-04-21T07:54:01.569527Z",
     "shell.execute_reply": "2021-04-21T07:54:01.568944Z"
    },
    "papermill": {
     "duration": 0.086333,
     "end_time": "2021-04-21T07:54:01.569705",
     "exception": false,
     "start_time": "2021-04-21T07:54:01.483372",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1461</td>\n",
       "      <td>169089.187500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1462</td>\n",
       "      <td>155726.609375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1463</td>\n",
       "      <td>200315.062500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1464</td>\n",
       "      <td>219728.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1465</td>\n",
       "      <td>241537.906250</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Id      SalePrice\n",
       "0  1461  169089.187500\n",
       "1  1462  155726.609375\n",
       "2  1463  200315.062500\n",
       "3  1464  219728.500000\n",
       "4  1465  241537.906250"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "testSubmission.to_csv('submission_house_pred_1.csv', index=False)\n",
    "testSubmission.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "prescribed-huntington",
   "metadata": {
    "papermill": {
     "duration": 0.064312,
     "end_time": "2021-04-21T07:54:01.702367",
     "exception": false,
     "start_time": "2021-04-21T07:54:01.638055",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 110.505247,
   "end_time": "2021-04-21T07:54:02.477274",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2021-04-21T07:52:11.972027",
   "version": "2.3.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
